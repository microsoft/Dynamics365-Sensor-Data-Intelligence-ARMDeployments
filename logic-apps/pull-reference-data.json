{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "CreateFirstAssetMaintenanceRefData": {
        "inputs": {
          "body": "@body('FilterAssetMaintenanceScenario')",
          "headers": {
            "ReadFileMetadataFromServer": true
          },
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "post",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
          "queries": {
            "folderPath": "sensorintelligencereferencedata/assetmaintenancedata",
            "name": "@{concat('assetmaintenance', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "GetLatestAssetMaintenanceScenarioRefData": [
            "Failed"
          ]
        },
        "runtimeConfiguration": {
          "contentTransfer": {
            "transferMode": "Chunked"
          }
        },
        "type": "ApiConnection"
      },
      "CreateFirstAssetMaintenanceScenarioRefData": {
        "inputs": {
          "body": "@body('FilterAssetMaintenanceScenario')",
          "headers": {
            "ReadFileMetadataFromServer": true
          },
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "post",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
          "queries": {
            "folderPath": "sensorintelligencereferencedata/scenarios/",
            "name": "assetmaintenance.json",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "CreateFirstAssetMaintenanceRefData": [
            "Succeeded"
          ]
        },
        "runtimeConfiguration": {
          "contentTransfer": {
            "transferMode": "Chunked"
          }
        },
        "type": "ApiConnection"
      },
      "FilterAssetMaintenanceScenario": {
        "inputs": {
          "from": "@body('ParseScenarioSensorMappings')?['value']",
          "where": "@equals(item()['Scenario'], 'AssetMaintenance')"
        },
        "runAfter": {
          "ParseScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "Query"
      },
      "FilterEquipmentDowntimeScenario": {
        "inputs": {
          "from": "@body('ParseScenarioSensorMappings')?['value']",
          "where": "@equals(item()['Scenario'], 'MachineReportingStatus')"
        },
        "runAfter": {
          "ParseScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "Query"
      },
      "FilterProductQualityScenario": {
        "inputs": {
          "from": "@body('ParseScenarioSensorMappings')?['value']",
          "where": "@equals(item()['Scenario'], 'ProductQualityValidation')"
        },
        "runAfter": {
          "ParseScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "Query"
      },
      "GetLatestAssetMaintenanceScenarioRefData": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "get",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath",
          "queries": {
            "inferContentType": true,
            "path": "sensorintelligencereferencedata/scenarios/assetmaintenance.json",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "FilterAssetMaintenanceScenario": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "GetLatestEquipmentDowntimeScenarioRefData": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "get",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath",
          "queries": {
            "inferContentType": true,
            "path": "sensorintelligencereferencedata/scenarios/equipmentdowntime.json",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "IfActiveEquipmentDowntimeScenarioExists": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "GetLatestProductQualityScenarioRefData": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "get",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath",
          "queries": {
            "inferContentType": true,
            "path": "sensorintelligencereferencedata/scenarios/productquality.json",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "IfActiveProductQualityScenarioExists": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "GetScenarioSensorMappings": {
        "inputs": {
          "authentication": "@parameters('DynamicsIdentityAuthentication')",
          "method": "GET",
          "uri": "@{parameters('EnvironmentUrl')}/data/SensorScenarioMappings?$filter=IsSensorActiveForScenario eq Microsoft.Dynamics.DataEntities.NoYes'Yes'"
        },
        "runAfter": {},
        "type": "Http"
      },
      "IfActiveEquipmentDowntimeScenarioExists": {
        "actions": {
          "GetSensorJobs": {
            "inputs": {
              "authentication": "@parameters('DynamicsIdentityAuthentication')",
              "method": "GET",
              "uri": "@{parameters('EnvironmentUrl')}/data/SensorJobs"
            },
            "runAfter": {},
            "type": "Http"
          },
          "ParseSensorJobsRefData": {
            "inputs": {
              "content": "@body('GetSensorJobs')",
              "schema": {
                "properties": {
                  "value": {
                    "items": {
                      "properties": {
                        "IsJobInProgress": {
                          "type": "string"
                        },
                        "JobDataAreaId": {
                          "type": "string"
                        },
                        "JobId": {
                          "type": "string"
                        },
                        "MachineNotReportingThreshold": {
                          "type": "integer"
                        },
                        "SensorId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "SensorId",
                        "JobId",
                        "JobDataAreaId",
                        "MachineNotReportingThreshold",
                        "IsJobInProgress"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "runAfter": {
              "GetSensorJobs": [
                "Succeeded"
              ]
            },
            "type": "ParseJson"
          },
          "SetNewEquipmentDowntimeScenarioRefData": {
            "inputs": {
              "name": "newEquipmentDowntimeScenarioRefData",
              "value": "@{body('ParseSensorJobsRefData')?['value']}"
            },
            "runAfter": {
              "ParseSensorJobsRefData": [
                "Succeeded"
              ]
            },
            "type": "SetVariable"
          }
        },
        "else": {
          "actions": {
            "SetNewEmptyEquipmentDowntimeScenarioRefData": {
              "inputs": {
                "name": "newEquipmentDowntimeScenarioRefData",
                "value": "\"[]\""
              },
              "runAfter": {},
              "type": "SetVariable"
            }
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@empty(body('FilterEquipmentDowntimeScenario'))",
                "@false"
              ]
            }
          ]
        },
        "runAfter": {
          "LatestEquipmentDowntimeScenarioRefDataExists": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "IfActiveProductQualityScenarioExists": {
        "actions": {
          "GetSensorItemBatchAttributeMappings": {
            "inputs": {
              "authentication": "@parameters('DynamicsIdentityAuthentication')",
              "method": "GET",
              "uri": "@{parameters('EnvironmentUrl')}/data/SensorJobItemBatchAttributes"
            },
            "runAfter": {},
            "type": "Http"
          },
          "ParseSensorItemBatchAttributeMappingsRefData": {
            "inputs": {
              "content": "@body('GetSensorItemBatchAttributeMappings')",
              "schema": {
                "properties": {
                  "value": {
                    "items": {
                      "properties": {
                        "AttributeName": {
                          "type": "string"
                        },
                        "IsJobCompleted": {
                          "type": "string"
                        },
                        "ItemNumber": {
                          "type": "string"
                        },
                        "JobDataAreaId": {
                          "type": "string"
                        },
                        "JobId": {
                          "type": "string"
                        },
                        "JobRegistrationStartDateTime": {
                          "format": "date",
                          "type": "string"
                        },
                        "JobRegistrationStopDateTime": {
                          "format": "date",
                          "type": "string"
                        },
                        "MaximumAttributeTolerance": {
                          "type": "number"
                        },
                        "MinimumAttributeTolerance": {
                          "type": "number"
                        },
                        "OptimalAttributeTolerance": {
                          "type": "number"
                        },
                        "OrderId": {
                          "type": "string"
                        },
                        "SensorId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "SensorId",
                        "JobId",
                        "JobDataAreaId",
                        "MachineNotReportingThreshold",
                        "IsJobInProgress"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "runAfter": {
              "GetSensorItemBatchAttributeMappings": [
                "Succeeded"
              ]
            },
            "type": "ParseJson"
          },
          "SetNewProductQualityScenarioRefData": {
            "inputs": {
              "name": "newProductQualityScenarioRefData",
              "value": "@{body('ParseSensorItemBatchAttributeMappingsRefData')?['value']}"
            },
            "runAfter": {
              "ParseSensorItemBatchAttributeMappingsRefData": [
                "Succeeded"
              ]
            },
            "type": "SetVariable"
          }
        },
        "else": {
          "actions": {
            "SetEmptyProductQualityScenarioRefData": {
              "inputs": {
                "name": "newProductQualityScenarioRefData",
                "value": "\"[]\""
              },
              "runAfter": {},
              "type": "SetVariable"
            }
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@empty(body('FilterProductQualityScenario'))",
                "@false"
              ]
            }
          ]
        },
        "runAfter": {
          "LatestProductQualityScenarioRefDataExists": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "IfAssetMaintenanceScenarioRefDataChanged": {
        "actions": {
          "CreateAssetMaintenanceRefData": {
            "inputs": {
              "body": "@body('FilterAssetMaintenanceScenario')",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/assetmaintenancedata",
                "name": "@{concat('assetmaintenance', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {},
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          },
          "UpdateLatestAssetMaintenanceRefData": {
            "inputs": {
              "body": "@body('FilterAssetMaintenanceScenario')",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "put",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent('sensorintelligencereferencedata/scenarios/assetmaintenance.json'))}"
            },
            "runAfter": {
              "CreateAssetMaintenanceRefData": [
                "Succeeded"
              ]
            },
            "type": "ApiConnection"
          }
        },
        "expression": {
          "and": [
            {
              "not": {
                "equals": [
                  "@variables('latestAssetMaintenanceRefData')",
                  "@variables('newAssetMaintenanceRefData')"
                ]
              }
            }
          ]
        },
        "runAfter": {
          "newAssetMaintenanceRefData": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "IfEquipmentDowntimeRefDataChanged": {
        "actions": {
          "CreateEquipmentDowntimeScenarioRefData": {
            "inputs": {
              "body": "@variables('newEquipmentDowntimeScenarioRefData')",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/scenarios",
                "name": "equipmentdowntime.json",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {
              "CreateSensorJobsBlob": [
                "Succeeded"
              ]
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          },
          "CreateSensorJobsBlob": {
            "inputs": {
              "body": "@variables('newEquipmentDowntimeScenarioRefData')",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/sensorjobs",
                "name": "@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {},
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          }
        },
        "expression": {
          "or": [
            {
              "not": {
                "equals": [
                  "@variables('latestEquipmentDowntimeScenarioRefData')",
                  "@variables('newEquipmentDowntimeScenarioRefData')"
                ]
              }
            },
            {
              "equals": [
                "@variables('latestEquipmentDowntimeScenarioRefDataExists')",
                "@false"
              ]
            }
          ]
        },
        "runAfter": {
          "SetLatestEquipmentDowntimeScenarioRefData": [
            "Succeeded",
            "Skipped"
          ],
          "SetLatestEquipmentDowntimeScenarioRefDataExistedToFalse": [
            "Succeeded",
            "Skipped"
          ]
        },
        "type": "If"
      },
      "IfProductQualityRefDataChanged": {
        "actions": {
          "CreateProductQualityScenarioRefData": {
            "inputs": {
              "body": "@variables('newProductQualityScenarioRefData')",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/scenarios",
                "name": "productquality.json",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {
              "CreateSensorItemBatchAttributeMappingsBlob": [
                "Succeeded"
              ]
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          },
          "CreateSensorItemBatchAttributeMappingsBlob": {
            "inputs": {
              "body": "@variables('newProductQualityScenarioRefData')",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/sensorjobbatchattributes",
                "name": "@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {},
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          }
        },
        "expression": {
          "or": [
            {
              "not": {
                "equals": [
                  "@variables('newProductQualityScenarioRefData')",
                  "@variables('latestProductQualityScenarioRefData')"
                ]
              }
            },
            {
              "equals": [
                "@variables('latestProductQualityScenarioRefDataExists')",
                "@false"
              ]
            }
          ]
        },
        "runAfter": {
          "SetLatestProductQualityScenarioRefData": [
            "Succeeded",
            "SKIPPED"
          ],
          "SetLatestProductQualityScenarioRefDataExistedToFalse": [
            "Succeeded",
            "SKIPPED"
          ]
        },
        "type": "If"
      },
      "LatestEquipmentDowntimeScenarioRefData": {
        "inputs": {
          "variables": [
            {
              "name": "latestEquipmentDowntimeScenarioRefData",
              "type": "string",
              "value": "\"\""
            }
          ]
        },
        "runAfter": {
          "FilterEquipmentDowntimeScenario": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "LatestEquipmentDowntimeScenarioRefDataExists": {
        "inputs": {
          "variables": [
            {
              "name": "latestEquipmentDowntimeScenarioRefDataExists",
              "type": "boolean",
              "value": "@true"
            }
          ]
        },
        "runAfter": {
          "NewEquipmentDowntimeScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "LatestProductQualityScenarioRefData": {
        "inputs": {
          "variables": [
            {
              "name": "latestProductQualityScenarioRefData",
              "type": "string",
              "value": "\"\""
            }
          ]
        },
        "runAfter": {
          "FilterProductQualityScenario": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "LatestProductQualityScenarioRefDataExists": {
        "inputs": {
          "variables": [
            {
              "name": "latestProductQualityScenarioRefDataExists",
              "type": "boolean",
              "value": "@true"
            }
          ]
        },
        "runAfter": {
          "NewProductQualityScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "NewEquipmentDowntimeScenarioRefData": {
        "inputs": {
          "variables": [
            {
              "name": "newEquipmentDowntimeScenarioRefData",
              "type": "string",
              "value": "\"\""
            }
          ]
        },
        "runAfter": {
          "LatestEquipmentDowntimeScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "NewProductQualityScenarioRefData": {
        "inputs": {
          "variables": [
            {
              "name": "newProductQualityScenarioRefData",
              "type": "string",
              "value": "\"\""
            }
          ]
        },
        "runAfter": {
          "LatestProductQualityScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "ParseScenarioSensorMappings": {
        "inputs": {
          "content": "@body('GetScenarioSensorMappings')",
          "schema": {
            "properties": {
              "value": {
                "items": {
                  "properties": {
                    "IsSensorActiveForScenario": {
                      "type": "string"
                    },
                    "Scenario": {
                      "type": "string"
                    },
                    "SensorId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "SensorId",
                    "Scenario",
                    "IsSensorActiveForScenario"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "runAfter": {
          "GetScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "ParseJson"
      },
      "SetEmptyLatestEquipmentDowntimeScenarioRefData": {
        "inputs": {
          "name": "latestEquipmentDowntimeScenarioRefData",
          "value": "\"[]\""
        },
        "runAfter": {
          "GetLatestEquipmentDowntimeScenarioRefData": [
            "Failed"
          ]
        },
        "type": "SetVariable"
      },
      "SetEmptyLatestProductQualityScenarioRefData": {
        "inputs": {
          "name": "latestProductQualityScenarioRefData",
          "value": "\"[]\""
        },
        "runAfter": {
          "GetLatestProductQualityScenarioRefData": [
            "FAILED"
          ]
        },
        "type": "SetVariable"
      },
      "SetLatestEquipmentDowntimeScenarioRefData": {
        "inputs": {
          "name": "latestEquipmentDowntimeScenarioRefData",
          "value": "@{body('GetLatestEquipmentDowntimeScenarioRefData')}"
        },
        "runAfter": {
          "GetLatestEquipmentDowntimeScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetLatestEquipmentDowntimeScenarioRefDataExistedToFalse": {
        "inputs": {
          "name": "latestEquipmentDowntimeScenarioRefDataExists",
          "value": "@false"
        },
        "runAfter": {
          "SetEmptyLatestEquipmentDowntimeScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetLatestProductQualityScenarioRefData": {
        "inputs": {
          "name": "latestProductQualityScenarioRefData",
          "value": "@{body('GetLatestProductQualityScenarioRefData')}"
        },
        "runAfter": {
          "GetLatestProductQualityScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetLatestProductQualityScenarioRefDataExistedToFalse": {
        "inputs": {
          "name": "latestProductQualityScenarioRefDataExists",
          "value": "@false"
        },
        "runAfter": {
          "SetEmptyLatestProductQualityScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "latestAssetMaintenanceRefData": {
        "inputs": {
          "variables": [
            {
              "name": "latestAssetMaintenanceRefData",
              "type": "string",
              "value": "@{body('GetLatestAssetMaintenanceScenarioRefData')}"
            }
          ]
        },
        "runAfter": {
          "GetLatestAssetMaintenanceScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "newAssetMaintenanceRefData": {
        "inputs": {
          "variables": [
            {
              "name": "newAssetMaintenanceRefData",
              "type": "string",
              "value": "@{body('FilterAssetMaintenanceScenario')}"
            }
          ]
        },
        "runAfter": {
          "latestAssetMaintenanceRefData": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "parameters": {
      "$connections": {
        "defaultValue": {},
        "type": "Object"
      },
      "DynamicsIdentityAuthentication": {
        "defaultValue": {},
        "type": "Object"
      },
      "EnvironmentUrl": {
        "defaultValue": "",
        "type": "String"
      },
      "StorageAccountName": {
        "defaultValue": "",
        "type": "String"
      }
    },
    "triggers": {
      "Recurrence": {
        "evaluatedRecurrence": {
          "frequency": "Minute",
          "interval": 2
        },
        "recurrence": {
          "frequency": "Minute",
          "interval": 2
        },
        "type": "Recurrence"
      }
    }
  },
  "parameters": {}
}
