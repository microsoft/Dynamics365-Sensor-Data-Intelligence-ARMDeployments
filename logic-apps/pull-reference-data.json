{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "CreateAssetMaintenanceScenarioRefDataBlob": {
        "inputs": {
          "variables": [
            {
              "name": "createAssetMaintenanceScenarioRefDataBlob",
              "type": "boolean",
              "value": "@false"
            }
          ]
        },
        "runAfter": {
          "LatestAssetMaintenanceScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "CreateEquipmentDowntimeScenarioRefDataBlob": {
        "inputs": {
          "variables": [
            {
              "name": "createEquipmentDowntimeScenarioRefDataBlob",
              "type": "boolean",
              "value": "@false"
            }
          ]
        },
        "runAfter": {
          "LatestEquipmentDowntimeScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "CreateProductionJobDelayedScenarioRefDataBlob": {
        "inputs": {
          "variables": [
            {
              "name": "createProductionJobDelayedScenarioRefDataBlob",
              "type": "boolean",
              "value": "@false"
            }
          ]
        },
        "runAfter": {
          "LatestProductionJobDelayedScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "CreatetProductQualityScenarioRefDataBlob": {
        "inputs": {
          "variables": [
            {
              "name": "createtProductQualityScenarioRefDataBlob",
              "type": "boolean",
              "value": "@false"
            }
          ]
        },
        "runAfter": {
          "LatestProductQualityScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "FilterAssetMaintenanceScenario": {
        "inputs": {
          "from": "@body('ParseScenarioSensorMappings')?['value']",
          "where": "@equals(item()['Scenario'], 'AssetMaintenance')"
        },
        "runAfter": {
          "ParseScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "Query"
      },
      "FilterEquipmentDowntimeScenario": {
        "inputs": {
          "from": "@body('ParseScenarioSensorMappings')?['value']",
          "where": "@equals(item()['Scenario'], 'MachineReportingStatus')"
        },
        "runAfter": {
          "ParseScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "Query"
      },
      "FilterProductQualityScenario": {
        "inputs": {
          "from": "@body('ParseScenarioSensorMappings')?['value']",
          "where": "@equals(item()['Scenario'], 'ProductQualityValidation')"
        },
        "runAfter": {
          "ParseScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "Query"
      },
      "FilterProductionJobDelayedScenario": {
        "inputs": {
          "from": "@body('ParseScenarioSensorMappings')?['value']",
          "where": "@equals(item()?['Scenario'], 'ProductionJobDelayed')"
        },
        "runAfter": {
          "ParseScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "Query"
      },
      "GetLatestAssetMaintenanceScenarioRefData": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "get",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestAssetMaintenanceScenarioRefDataPointer')))}/content",
          "queries": {
            "inferContentType": true
          }
        },
        "runAfter": {
          "SetLatestAssetMaintenanceScenarioRefDataPointer": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "GetLatestAssetMaintenanceScenarioRefDataPointer": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "get",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath",
          "queries": {
            "inferContentType": true,
            "path": "sensorintelligencereferencedata/scenarios/assetmaintenance.json",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "NewAssetMaintenanceScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "GetLatestEquipmentDowntimeScenarioRefData": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "get",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestEquipmentDowntimeScenarioRefDataPointer')))}/content",
          "queries": {
            "inferContentType": true
          }
        },
        "runAfter": {
          "SetLatestEquipmentDowntimeScenarioRefDataPointer": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "GetLatestEquipmentDowntimeScenarioRefDataPointer": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "get",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath",
          "queries": {
            "inferContentType": true,
            "path": "sensorintelligencereferencedata/scenarios/equipmentdowntime.json",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "IfActiveEquipmentDowntimeScenarioExists": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "GetLatestProductQualityScenarioRefData": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "get",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(variables('latestProductQualityScenarioRefDataPointer')))}/content",
          "queries": {
            "inferContentType": true
          }
        },
        "runAfter": {
          "SetLatestProductQualityScenarioRefDataPointer": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "GetLatestProductQualityScenarioRefDataPointer": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "get",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath",
          "queries": {
            "inferContentType": true,
            "path": "sensorintelligencereferencedata/scenarios/productquality.json",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "IfActiveProductQualityScenarioExists": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "GetLatestProductionJobDelayedScenarioRefData": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "get",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(body('GetLatestProductionJobDelayedScenarioRefDataPointer')))}/content",
          "queries": {
            "inferContentType": true
          }
        },
        "runAfter": {
          "SetLatestProductionJobDelayedScenarioRefDataPointer": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "GetLatestProductionJobDelayedScenarioRefDataPointer": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "get",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath",
          "queries": {
            "inferContentType": true,
            "path": "sensorintelligencereferencedata/scenarios/productionjobdelayed.json",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "IfActiveProductionJobDelayedScenarioExists": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "GetScenarioSensorMappings": {
        "inputs": {
          "authentication": "@parameters('DynamicsIdentityAuthentication')",
          "method": "GET",
          "uri": "@{parameters('EnvironmentUrl')}/data/SensorScenarioMappings?$filter=IsSensorActiveForScenario eq Microsoft.Dynamics.DataEntities.NoYes'Yes'"
        },
        "runAfter": {},
        "type": "Http"
      },
      "IfActiveEquipmentDowntimeScenarioExists": {
        "actions": {
          "GetSensorJobs": {
            "inputs": {
              "authentication": "@parameters('DynamicsIdentityAuthentication')",
              "method": "GET",
              "uri": "@{parameters('EnvironmentUrl')}/data/SensorJobs"
            },
            "runAfter": {},
            "type": "Http"
          },
          "ParseSensorJobsRefData": {
            "inputs": {
              "content": "@body('GetSensorJobs')",
              "schema": {
                "properties": {
                  "value": {
                    "items": {
                      "properties": {
                        "IsJobInProgress": {
                          "type": "string"
                        },
                        "JobDataAreaId": {
                          "type": "string"
                        },
                        "JobId": {
                          "type": "string"
                        },
                        "MachineNotReportingThreshold": {
                          "type": "integer"
                        },
                        "SensorId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "SensorId",
                        "JobId",
                        "JobDataAreaId",
                        "MachineNotReportingThreshold",
                        "IsJobInProgress"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "runAfter": {
              "GetSensorJobs": [
                "Succeeded"
              ]
            },
            "type": "ParseJson"
          },
          "SetNewEquipmentDowntimeScenarioRefData": {
            "inputs": {
              "name": "newEquipmentDowntimeScenarioRefData",
              "value": "@{body('ParseSensorJobsRefData')?['value']}"
            },
            "runAfter": {
              "ParseSensorJobsRefData": [
                "Succeeded"
              ]
            },
            "type": "SetVariable"
          }
        },
        "else": {
          "actions": {
            "SetNewEmptyEquipmentDowntimeScenarioRefData": {
              "inputs": {
                "name": "newEquipmentDowntimeScenarioRefData",
                "value": "[]"
              },
              "runAfter": {},
              "type": "SetVariable"
            }
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@empty(body('FilterEquipmentDowntimeScenario'))",
                "@false"
              ]
            }
          ]
        },
        "runAfter": {
          "NewEquipmentDowntimeScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "IfActiveProductQualityScenarioExists": {
        "actions": {
          "GetSensorItemBatchAttributeMappings": {
            "inputs": {
              "authentication": "@parameters('DynamicsIdentityAuthentication')",
              "method": "GET",
              "uri": "@{parameters('EnvironmentUrl')}/data/SensorJobItemBatchAttributes"
            },
            "runAfter": {},
            "type": "Http"
          },
          "ParseSensorItemBatchAttributeMappingsRefData": {
            "inputs": {
              "content": "@body('GetSensorItemBatchAttributeMappings')",
              "schema": {
                "properties": {
                  "value": {
                    "items": {
                      "properties": {
                        "AttributeName": {
                          "type": "string"
                        },
                        "IsJobCompleted": {
                          "type": "string"
                        },
                        "ItemNumber": {
                          "type": "string"
                        },
                        "JobDataAreaId": {
                          "type": "string"
                        },
                        "JobId": {
                          "type": "string"
                        },
                        "JobRegistrationStartDateTime": {
                          "format": "datetime",
                          "type": "string"
                        },
                        "JobRegistrationStopDateTime": {
                          "format": "datetime",
                          "type": "string"
                        },
                        "MaximumAttributeTolerance": {
                          "type": "number"
                        },
                        "MinimumAttributeTolerance": {
                          "type": "number"
                        },
                        "OptimalAttributeTolerance": {
                          "type": "number"
                        },
                        "OrderId": {
                          "type": "string"
                        },
                        "SensorId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "SensorId",
                        "JobId",
                        "JobDataAreaId",
                        "IsJobCompleted"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "runAfter": {
              "GetSensorItemBatchAttributeMappings": [
                "Succeeded"
              ]
            },
            "type": "ParseJson"
          },
          "SetNewProductQualityScenarioRefData": {
            "inputs": {
              "name": "newProductQualityScenarioRefData",
              "value": "@{body('ParseSensorItemBatchAttributeMappingsRefData')?['value']}"
            },
            "runAfter": {
              "ParseSensorItemBatchAttributeMappingsRefData": [
                "Succeeded"
              ]
            },
            "type": "SetVariable"
          }
        },
        "else": {
          "actions": {
            "SetEmptyProductQualityScenarioRefData": {
              "inputs": {
                "name": "newProductQualityScenarioRefData",
                "value": "[]"
              },
              "runAfter": {},
              "type": "SetVariable"
            }
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@empty(body('FilterProductQualityScenario'))",
                "@false"
              ]
            }
          ]
        },
        "runAfter": {
          "NewProductQualityScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "IfActiveProductionJobDelayedScenarioExists": {
        "actions": {
          "GetSensorJobExecutions": {
            "inputs": {
              "authentication": "@parameters('DynamicsIdentityAuthentication')",
              "method": "GET",
              "uri": "@{parameters('EnvironmentUrl')}/data/SensorJobExecutions"
            },
            "runAfter": {},
            "type": "Http"
          },
          "ParseSensorJobExecutionsRefData": {
            "inputs": {
              "content": "@body('GetSensorJobExecutions')",
              "schema": {
                "properties": {
                  "value": {
                    "items": {
                      "properties": {
                        "IsJobCompleted": {
                          "type": "string"
                        },
                        "JobDataAreaId": {
                          "type": "string"
                        },
                        "JobId": {
                          "type": "string"
                        },
                        "JobLastRegistrationDateTime": {
                          "format": "datetime",
                          "type": "string"
                        },
                        "JobRegistrationStartDateTime": {
                          "format": "datetime",
                          "type": "string"
                        },
                        "JobRegistrationStopDateTime": {
                          "format": "datetime",
                          "type": "string"
                        },
                        "ProcessingTimeInHours": {
                          "type": "number"
                        },
                        "ProductionRateDeviationThreshold": {
                          "type": "number"
                        },
                        "RequestedQuantity": {
                          "type": "number"
                        },
                        "SensorId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "SensorId",
                        "JobId",
                        "JobDataAreaId",
                        "MachineNotReportingThreshold",
                        "IsJobCompleted",
                        "RequestedQuantity"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "runAfter": {
              "GetSensorJobExecutions": [
                "Succeeded"
              ]
            },
            "type": "ParseJson"
          },
          "SetNewProductionJobDelayedScenarioRefData": {
            "inputs": {
              "name": "newProductionJobDelayedScenarioRefData",
              "value": "@{body('ParseSensorJobExecutionsRefData')?['value']}"
            },
            "runAfter": {
              "ParseSensorJobExecutionsRefData": [
                "Succeeded"
              ]
            },
            "type": "SetVariable"
          }
        },
        "else": {
          "actions": {
            "SetEmptyProductionJobDelayedScenarioRefData": {
              "inputs": {
                "name": "newProductionJobDelayedScenarioRefData",
                "value": "[]"
              },
              "runAfter": {},
              "type": "SetVariable"
            }
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@empty(body('FilterProductionJobDelayedScenario'))",
                "@false"
              ]
            }
          ]
        },
        "runAfter": {
          "NewProductionJobDelayedScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "IfNeedsToCreateAssetMaintenanceScenarioRefDataBlob": {
        "actions": {
          "CreateAssetMaintenanceScenarioRefData": {
            "inputs": {
              "body": "@variables('newAssetMaintenanceScenarioRefData')",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/assetmaintenancedata",
                "name": "@{concat('assetmaintenance', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {},
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          },
          "CreateLatestAssetMaintenanceScenarioRefData": {
            "inputs": {
              "body": "@body('CreateAssetMaintenanceScenarioRefData')?['Path']",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/scenarios/",
                "name": "assetmaintenance.json",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {
              "CreateAssetMaintenanceScenarioRefData": [
                "Succeeded"
              ]
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          }
        },
        "expression": {
          "or": [
            {
              "equals": [
                "@variables('createAssetMaintenanceScenarioRefDataBlob')",
                "@true"
              ]
            }
          ]
        },
        "runAfter": {
          "SetCreateAssetMaintenanceScenarioRefDataBlobBecauseRefDataDoesnNotExist": [
            "Succeeded",
            "Skipped"
          ],
          "SetCreateAssetMaintenanceScenarioRefDataBlobBecauseRefDataPointerDoesNotExist": [
            "Succeeded",
            "Skipped"
          ],
          "SetCreateAssetMaintenanceScenarioRefDataBlobIfRefDataChanged": [
            "Succeeded",
            "Skipped"
          ]
        },
        "type": "If"
      },
      "IfNeedsToCreateEquipmentDowntimeScenarioRefDataBlob": {
        "actions": {
          "CreateEquipmentDowntimeScenarioRefData": {
            "inputs": {
              "body": "@body('CreateSensorJobsBlob')?['Path']",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/scenarios",
                "name": "equipmentdowntime.json",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {
              "CreateSensorJobsBlob": [
                "Succeeded"
              ]
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          },
          "CreateSensorJobsBlob": {
            "inputs": {
              "body": "@variables('newEquipmentDowntimeScenarioRefData')",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/sensorjobs",
                "name": "@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {},
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@variables('createEquipmentDowntimeScenarioRefDataBlob')",
                "@true"
              ]
            }
          ]
        },
        "runAfter": {
          "SetCreateEquipmentDowntimeScenarioRefDataBlobBecauseRedDataDoesNotExist": [
            "Succeeded",
            "Skipped"
          ],
          "SetCreateEquipmentDowntimeScenarioRefDataBlobBecauseRefDataPointerDoesNotExist": [
            "Succeeded",
            "Skipped"
          ],
          "SetCreateEquipmentDowntimeScenarioRefDataBlobIfRefDataChanged": [
            "Succeeded",
            "Skipped"
          ]
        },
        "type": "If"
      },
      "IfNeedsToCreateProductQualityScenarioRefDataBlob": {
        "actions": {
          "CreateProductQualityScenarioRefData": {
            "inputs": {
              "body": "@body('CreateSensorItemBatchAttributeMappingsBlob')?['Path']",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/scenarios",
                "name": "productquality.json",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {
              "CreateSensorItemBatchAttributeMappingsBlob": [
                "Succeeded"
              ]
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          },
          "CreateSensorItemBatchAttributeMappingsBlob": {
            "inputs": {
              "body": "@variables('newProductQualityScenarioRefData')",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/sensorjobbatchattributes",
                "name": "@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {},
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@variables('createtProductQualityScenarioRefDataBlob')",
                "@true"
              ]
            }
          ]
        },
        "runAfter": {
          "SetCreateProductQualityScenarioRefDataBlobBecauseRefDataDoesNotExist": [
            "Succeeded",
            "Skipped"
          ],
          "SetCreateProductQualityScenarioRefDataBlobBecauseRefDataPointerDoesNotExist": [
            "Succeeded",
            "Skipped"
          ],
          "SetCreateProductQualityScenarioRefDataBlobIfRefDataChanged": [
            "Succeeded",
            "Skipped"
          ]
        },
        "type": "If"
      },
      "IfNeedsToCreateProductionJobDelayedScenarioRefDataBlob": {
        "actions": {
          "CreateProductionJobDelayedScenarioRefData": {
            "inputs": {
              "body": "@body('CreateSensorJobExecutionMappingsBlob')?['Path']",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/scenarios",
                "name": "productionjobdelayed.json",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {
              "CreateSensorJobExecutionMappingsBlob": [
                "Succeeded"
              ]
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          },
          "CreateSensorJobExecutionMappingsBlob": {
            "inputs": {
              "body": "@variables('newProductionJobDelayedScenarioRefData')",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/sensorjobexecutions",
                "name": "@{concat('sensorjobexecutions', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {},
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@variables('createProductionJobDelayedScenarioRefDataBlob')",
                "@true"
              ]
            }
          ]
        },
        "runAfter": {
          "SetCreateProductionJobDelayedScenarioRefDataBlobBecauseRefDataDoesNotExist": [
            "Succeeded",
            "Skipped"
          ],
          "SetCreateProductionJobDelayedScenarioRefDataBlobIfRefDataChanged": [
            "Succeeded",
            "Skipped"
          ],
          "SetCreatetProductionJobDelayedScenarioRefDataBecauseRefDataPointerDoesNotExist": [
            "Succeeded",
            "Skipped"
          ]
        },
        "type": "If"
      },
      "LatestAssetMaintenanceScenarioRefData": {
        "inputs": {
          "variables": [
            {
              "name": "latestAssetMaintenanceScenarioRefData",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "LatestAssetMaintenanceScenarioRefDataPointer": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "LatestAssetMaintenanceScenarioRefDataPointer": {
        "inputs": {
          "variables": [
            {
              "name": "latestAssetMaintenanceScenarioRefDataPointer",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "FilterAssetMaintenanceScenario": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "LatestEquipmentDowntimeScenarioRefData": {
        "inputs": {
          "variables": [
            {
              "name": "latestEquipmentDowntimeScenarioRefData",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "LatestEquipmentDowntimeScenarioRefDataPointer": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "LatestEquipmentDowntimeScenarioRefDataPointer": {
        "inputs": {
          "variables": [
            {
              "name": "latestEquipmentDowntimeScenarioRefDataPointer",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "FilterEquipmentDowntimeScenario": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "LatestProductQualityScenarioRefData": {
        "inputs": {
          "variables": [
            {
              "name": "latestProductQualityScenarioRefData",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "LatestProductQualityScenarioRefDataPointer": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "LatestProductQualityScenarioRefDataPointer": {
        "inputs": {
          "variables": [
            {
              "name": "latestProductQualityScenarioRefDataPointer",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "FilterProductQualityScenario": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "LatestProductionJobDelayedScenarioRefData": {
        "inputs": {
          "variables": [
            {
              "name": "latestProductionJobDelayedScenarioRefData",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "LatestProductionJobDelayedScenarioRefDataPointer": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "LatestProductionJobDelayedScenarioRefDataPointer": {
        "inputs": {
          "variables": [
            {
              "name": "latestProductionJobDelayedScenarioRefDataPointer",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "FilterProductionJobDelayedScenario": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "NewAssetMaintenanceScenarioRefData": {
        "inputs": {
          "variables": [
            {
              "name": "newAssetMaintenanceScenarioRefData",
              "type": "string",
              "value": "@{body('FilterAssetMaintenanceScenario')}"
            }
          ]
        },
        "runAfter": {
          "CreateAssetMaintenanceScenarioRefDataBlob": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "NewEquipmentDowntimeScenarioRefData": {
        "inputs": {
          "variables": [
            {
              "name": "newEquipmentDowntimeScenarioRefData",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "CreateEquipmentDowntimeScenarioRefDataBlob": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "NewProductQualityScenarioRefData": {
        "inputs": {
          "variables": [
            {
              "name": "newProductQualityScenarioRefData",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "CreatetProductQualityScenarioRefDataBlob": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "NewProductionJobDelayedScenarioRefData": {
        "inputs": {
          "variables": [
            {
              "name": "newProductionJobDelayedScenarioRefData",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "CreateProductionJobDelayedScenarioRefDataBlob": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "ParseScenarioSensorMappings": {
        "inputs": {
          "content": "@body('GetScenarioSensorMappings')",
          "schema": {
            "properties": {
              "value": {
                "items": {
                  "properties": {
                    "IsSensorActiveForScenario": {
                      "type": "string"
                    },
                    "Scenario": {
                      "type": "string"
                    },
                    "SensorId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "SensorId",
                    "Scenario",
                    "IsSensorActiveForScenario"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "runAfter": {
          "GetScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "ParseJson"
      },
      "SetCreateAssetMaintenanceScenarioRefDataBlobBecauseRefDataDoesnNotExist": {
        "inputs": {
          "name": "createAssetMaintenanceScenarioRefDataBlob",
          "value": "@true"
        },
        "runAfter": {
          "GetLatestAssetMaintenanceScenarioRefData": [
            "Failed"
          ]
        },
        "type": "SetVariable"
      },
      "SetCreateAssetMaintenanceScenarioRefDataBlobBecauseRefDataPointerDoesNotExist": {
        "inputs": {
          "name": "createAssetMaintenanceScenarioRefDataBlob",
          "value": "@true"
        },
        "runAfter": {
          "GetLatestAssetMaintenanceScenarioRefDataPointer": [
            "Failed"
          ]
        },
        "type": "SetVariable"
      },
      "SetCreateAssetMaintenanceScenarioRefDataBlobIfRefDataChanged": {
        "inputs": {
          "name": "createAssetMaintenanceScenarioRefDataBlob",
          "value": "@not(equals(variables('latestAssetMaintenanceScenarioRefData'), variables('newAssetMaintenanceScenarioRefData')))"
        },
        "runAfter": {
          "SetLatestAssetMaintenanceScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetCreateEquipmentDowntimeScenarioRefDataBlobBecauseRedDataDoesNotExist": {
        "inputs": {
          "name": "createEquipmentDowntimeScenarioRefDataBlob",
          "value": "@true"
        },
        "runAfter": {
          "GetLatestEquipmentDowntimeScenarioRefData": [
            "Failed"
          ]
        },
        "type": "SetVariable"
      },
      "SetCreateEquipmentDowntimeScenarioRefDataBlobBecauseRefDataPointerDoesNotExist": {
        "inputs": {
          "name": "createEquipmentDowntimeScenarioRefDataBlob",
          "value": "@true"
        },
        "runAfter": {
          "GetLatestEquipmentDowntimeScenarioRefDataPointer": [
            "Failed"
          ]
        },
        "type": "SetVariable"
      },
      "SetCreateEquipmentDowntimeScenarioRefDataBlobIfRefDataChanged": {
        "inputs": {
          "name": "createEquipmentDowntimeScenarioRefDataBlob",
          "value": "@not(equals(variables('newEquipmentDowntimeScenarioRefData'), variables('latestEquipmentDowntimeScenarioRefData')))"
        },
        "runAfter": {
          "SetLatestEquipmentDowntimeScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetCreateProductQualityScenarioRefDataBlobBecauseRefDataDoesNotExist": {
        "inputs": {
          "name": "createtProductQualityScenarioRefDataBlob",
          "value": "@true"
        },
        "runAfter": {
          "GetLatestProductQualityScenarioRefData": [
            "Failed"
          ]
        },
        "type": "SetVariable"
      },
      "SetCreateProductQualityScenarioRefDataBlobBecauseRefDataPointerDoesNotExist": {
        "inputs": {
          "name": "createtProductQualityScenarioRefDataBlob",
          "value": "@true"
        },
        "runAfter": {
          "GetLatestProductQualityScenarioRefDataPointer": [
            "Failed"
          ]
        },
        "type": "SetVariable"
      },
      "SetCreateProductQualityScenarioRefDataBlobIfRefDataChanged": {
        "inputs": {
          "name": "createtProductQualityScenarioRefDataBlob",
          "value": "@not(equals(variables('newProductQualityScenarioRefData'), variables('latestProductQualityScenarioRefData')))"
        },
        "runAfter": {
          "SetLatestProductQualityScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetCreateProductionJobDelayedScenarioRefDataBlobBecauseRefDataDoesNotExist": {
        "inputs": {
          "name": "createProductionJobDelayedScenarioRefDataBlob",
          "value": "@true"
        },
        "runAfter": {
          "GetLatestProductionJobDelayedScenarioRefData": [
            "Failed"
          ]
        },
        "type": "SetVariable"
      },
      "SetCreateProductionJobDelayedScenarioRefDataBlobIfRefDataChanged": {
        "inputs": {
          "name": "createProductionJobDelayedScenarioRefDataBlob",
          "value": "@not(equals(variables('newProductionJobDelayedScenarioRefData'), variables('latestProductionJobDelayedScenarioRefData')))"
        },
        "runAfter": {
          "SetLatestProductionJobDelayedScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetCreatetProductionJobDelayedScenarioRefDataBecauseRefDataPointerDoesNotExist": {
        "inputs": {
          "name": "createProductionJobDelayedScenarioRefDataBlob",
          "value": "@true"
        },
        "runAfter": {
          "GetLatestProductionJobDelayedScenarioRefDataPointer": [
            "Failed"
          ]
        },
        "type": "SetVariable"
      },
      "SetLatestAssetMaintenanceScenarioRefData": {
        "inputs": {
          "name": "latestAssetMaintenanceScenarioRefData",
          "value": "@{body('GetLatestAssetMaintenanceScenarioRefData')}"
        },
        "runAfter": {
          "GetLatestAssetMaintenanceScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetLatestAssetMaintenanceScenarioRefDataPointer": {
        "inputs": {
          "name": "latestAssetMaintenanceScenarioRefDataPointer",
          "value": "@{body('GetLatestAssetMaintenanceScenarioRefDataPointer')}"
        },
        "runAfter": {
          "GetLatestAssetMaintenanceScenarioRefDataPointer": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetLatestEquipmentDowntimeScenarioRefData": {
        "inputs": {
          "name": "latestEquipmentDowntimeScenarioRefData",
          "value": "@{body('GetLatestEquipmentDowntimeScenarioRefData')}"
        },
        "runAfter": {
          "GetLatestEquipmentDowntimeScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetLatestEquipmentDowntimeScenarioRefDataPointer": {
        "inputs": {
          "name": "latestEquipmentDowntimeScenarioRefDataPointer",
          "value": "@{body('GetLatestEquipmentDowntimeScenarioRefDataPointer')}"
        },
        "runAfter": {
          "GetLatestEquipmentDowntimeScenarioRefDataPointer": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetLatestProductQualityScenarioRefData": {
        "inputs": {
          "name": "latestProductQualityScenarioRefData",
          "value": "@{body('GetLatestProductQualityScenarioRefData')}"
        },
        "runAfter": {
          "GetLatestProductQualityScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetLatestProductQualityScenarioRefDataPointer": {
        "inputs": {
          "name": "latestProductQualityScenarioRefDataPointer",
          "value": "@{body('GetLatestProductQualityScenarioRefDataPointer')}"
        },
        "runAfter": {
          "GetLatestProductQualityScenarioRefDataPointer": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetLatestProductionJobDelayedScenarioRefData": {
        "inputs": {
          "name": "latestProductionJobDelayedScenarioRefData",
          "value": "@{body('GetLatestProductionJobDelayedScenarioRefData')}"
        },
        "runAfter": {
          "GetLatestProductionJobDelayedScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      },
      "SetLatestProductionJobDelayedScenarioRefDataPointer": {
        "inputs": {
          "name": "latestProductionJobDelayedScenarioRefDataPointer",
          "value": "@{body('GetLatestProductionJobDelayedScenarioRefDataPointer')}"
        },
        "runAfter": {
          "GetLatestProductionJobDelayedScenarioRefDataPointer": [
            "Succeeded"
          ]
        },
        "type": "SetVariable"
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "parameters": {
      "$connections": {
        "defaultValue": {},
        "type": "Object"
      },
      "DynamicsIdentityAuthentication": {
        "defaultValue": {},
        "type": "Object"
      },
      "EnvironmentUrl": {
        "defaultValue": "",
        "type": "String"
      },
      "StorageAccountName": {
        "defaultValue": "",
        "type": "String"
      }
    },
    "triggers": {
      "Recurrence": {
        "evaluatedRecurrence": {
          "frequency": "Minute",
          "interval": 2
        },
        "recurrence": {
          "frequency": "Minute",
          "interval": 2
        },
        "type": "Recurrence"
      }
    }
  },
  "parameters": {}
}
