{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "CreateFirstAssetMaintenanceRefData": {
        "inputs": {
          "body": "@body('FilterAssetMaintenanceScenario')",
          "headers": {
            "ReadFileMetadataFromServer": true
          },
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "post",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
          "queries": {
            "folderPath": "sensorintelligencereferencedata/assetmaintenancedata",
            "name": "@{concat('assetmaintenance', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "GetLatestAssetMaintenanceScenarioRefData": [
            "Failed"
          ]
        },
        "runtimeConfiguration": {
          "contentTransfer": {
            "transferMode": "Chunked"
          }
        },
        "type": "ApiConnection"
      },
      "CreateFirstAssetMaintenanceScenarioRefData": {
        "inputs": {
          "body": "@body('FilterAssetMaintenanceScenario')",
          "headers": {
            "ReadFileMetadataFromServer": true
          },
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "post",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
          "queries": {
            "folderPath": "sensorintelligencereferencedata/scenarios/",
            "name": "assetmaintenance.json",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "CreateFirstAssetMaintenanceRefData": [
            "Succeeded"
          ]
        },
        "runtimeConfiguration": {
          "contentTransfer": {
            "transferMode": "Chunked"
          }
        },
        "type": "ApiConnection"
      },
      "FilterAssetMaintenanceScenario": {
        "inputs": {
          "from": "@body('ParseScenarioSensorMappings')?['value']",
          "where": "@equals(item()['Scenario'], 'AssetMaintenance')"
        },
        "runAfter": {
          "ParseScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "Query"
      },
      "FilterEquipmentDowntimeScenario": {
        "inputs": {
          "from": "@body('ParseScenarioSensorMappings')?['value']",
          "where": "@equals(item()['Scenario'], 'MachineReportingStatus')"
        },
        "runAfter": {
          "ParseScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "Query"
      },
      "FilterProductQualityScenario": {
        "inputs": {
          "from": "@body('ParseScenarioSensorMappings')?['value']",
          "where": "@equals(item()['Scenario'], 'ProductQualityValidation')"
        },
        "runAfter": {
          "ParseScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "Query"
      },
      "GetLatestAssetMaintenanceScenarioRefData": {
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['azureblob']['connectionId']"
            }
          },
          "method": "get",
          "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath",
          "queries": {
            "inferContentType": true,
            "path": "sensorintelligencereferencedata/scenarios/assetmaintenance.json",
            "queryParametersSingleEncoded": true
          }
        },
        "runAfter": {
          "FilterAssetMaintenanceScenario": [
            "Succeeded"
          ]
        },
        "type": "ApiConnection"
      },
      "GetScenarioSensorMappings": {
        "inputs": {
          "authentication": "@parameters('DynamicsIdentityAuthentication')",
          "method": "GET",
          "uri": "@{parameters('EnvironmentUrl')}/data/SensorScenarioMappings?$filter=IsSensorActiveForScenario eq Microsoft.Dynamics.DataEntities.NoYes'Yes'"
        },
        "runAfter": {},
        "type": "Http"
      },
      "IfActiveEquipmentDowntimeScenarioExists": {
        "actions": {
          "CreateFirstEquipmentDowntimeScenarioRefData": {
            "inputs": {
              "body": "@body('ParseScenarioSensorMappings')?['value']",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/scenarios/",
                "name": "equipmentdowntime.json",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {
              "CreateFirstSensorJobsBlob": [
                "Succeeded"
              ]
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          },
          "CreateFirstSensorJobsBlob": {
            "inputs": {
              "body": "@body('ParseSensorJobsRefData')?['value']",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/sensorjobs",
                "name": "@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {
              "GetLatestEquipmentDowntimeScenarioRefData": [
                "Failed"
              ]
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          },
          "GetLatestEquipmentDowntimeScenarioRefData": {
            "inputs": {
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "get",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath",
              "queries": {
                "inferContentType": true,
                "path": "sensorintelligencereferencedata/scenarios/equipmentdowntime.json",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {
              "ParseSensorJobsRefData": [
                "Succeeded"
              ]
            },
            "type": "ApiConnection"
          },
          "GetSensorJobs": {
            "inputs": {
              "authentication": "@parameters('DynamicsIdentityAuthentication')",
              "method": "GET",
              "uri": "@{parameters('EnvironmentUrl')}/data/SensorJobs"
            },
            "runAfter": {},
            "type": "Http"
          },
          "IfEquipmentDowntimeScenarioRefDataChanged": {
            "actions": {
              "CreateSensorJobsBlob": {
                "inputs": {
                  "body": "@body('ParseSensorJobsRefData')?['value']",
                  "headers": {
                    "ReadFileMetadataFromServer": true
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azureblob']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                  "queries": {
                    "folderPath": "sensorintelligencereferencedata/sensorjobs",
                    "name": "@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                    "queryParametersSingleEncoded": true
                  }
                },
                "runAfter": {},
                "runtimeConfiguration": {
                  "contentTransfer": {
                    "transferMode": "Chunked"
                  }
                },
                "type": "ApiConnection"
              },
              "UpdateLatestEquipmentDowntimeScenarioRefData": {
                "inputs": {
                  "body": "@body('ParseSensorJobsRefData')?['value']",
                  "headers": {
                    "ReadFileMetadataFromServer": true
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azureblob']['connectionId']"
                    }
                  },
                  "method": "put",
                  "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent('sensorintelligencereferencedata/scenarios/equipmentdowntime.json'))}"
                },
                "runAfter": {
                  "CreateSensorJobsBlob": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection"
              }
            },
            "expression": {
              "and": [
                {
                  "not": {
                    "equals": [
                      "@string(body('GetLatestEquipmentDowntimeScenarioRefData'))",
                      "@string(body('ParseSensorJobsRefData')?['value'])"
                    ]
                  }
                }
              ]
            },
            "runAfter": {
              "GetLatestEquipmentDowntimeScenarioRefData": [
                "Succeeded"
              ]
            },
            "type": "If"
          },
          "ParseSensorJobsRefData": {
            "inputs": {
              "content": "@body('GetSensorJobs')",
              "schema": {
                "properties": {
                  "value": {
                    "items": {
                      "properties": {
                        "IsJobInProgress": {
                          "type": "string"
                        },
                        "JobDataAreaId": {
                          "type": "string"
                        },
                        "JobId": {
                          "type": "string"
                        },
                        "MachineNotReportingThreshold": {
                          "type": "integer"
                        },
                        "SensorId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "SensorId",
                        "JobId",
                        "JobDataAreaId",
                        "MachineNotReportingThreshold",
                        "IsJobInProgress"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "runAfter": {
              "GetSensorJobs": [
                "Succeeded"
              ]
            },
            "type": "ParseJson"
          }
        },
        "else": {
          "actions": {
            "CreateEmptyEquipmentDowntimeScenarioRefData": {
              "inputs": {
                "body": "[]",
                "headers": {
                  "ReadFileMetadataFromServer": true
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                "queries": {
                  "folderPath": "sensorintelligencereferencedata/scenarios/",
                  "name": "equipmentdowntime.json",
                  "queryParametersSingleEncoded": true
                }
              },
              "runAfter": {
                "CreateFirstEmptySensorJobsBlob": [
                  "Succeeded"
                ]
              },
              "runtimeConfiguration": {
                "contentTransfer": {
                  "transferMode": "Chunked"
                }
              },
              "type": "ApiConnection"
            },
            "CreateFirstEmptySensorJobsBlob": {
              "inputs": {
                "body": "[]",
                "headers": {
                  "ReadFileMetadataFromServer": true
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                "queries": {
                  "folderPath": "sensorintelligencereferencedata/sensorjobs",
                  "name": "@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                  "queryParametersSingleEncoded": true
                }
              },
              "runAfter": {
                "GetLatestEquipmentDowntimeRefData2": [
                  "Failed"
                ]
              },
              "runtimeConfiguration": {
                "contentTransfer": {
                  "transferMode": "Chunked"
                }
              },
              "type": "ApiConnection"
            },
            "GetLatestEquipmentDowntimeRefData2": {
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath",
                "queries": {
                  "inferContentType": true,
                  "path": "sensorintelligencereferencedata/scenarios/equipmentdowntime.json",
                  "queryParametersSingleEncoded": true
                }
              },
              "runAfter": {},
              "type": "ApiConnection"
            },
            "IfLatestEquipmentDowntimeScenarioRefDataIsNotEmpty": {
              "actions": {
                "CreateEmptySensorJobsBlob": {
                  "inputs": {
                    "body": "[]",
                    "headers": {
                      "ReadFileMetadataFromServer": true
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                    "queries": {
                      "folderPath": "sensorintelligencereferencedata/sensorjobs",
                      "name": "@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                      "queryParametersSingleEncoded": true
                    }
                  },
                  "runAfter": {},
                  "runtimeConfiguration": {
                    "contentTransfer": {
                      "transferMode": "Chunked"
                    }
                  },
                  "type": "ApiConnection"
                },
                "UpdateEquipmentDowntimeScenarionRefDataToEmpty": {
                  "inputs": {
                    "body": "[]",
                    "headers": {
                      "ReadFileMetadataFromServer": true
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                      }
                    },
                    "method": "put",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent('sensorintelligencereferencedata/scenarios/equipmentdowntime'))}"
                  },
                  "runAfter": {
                    "CreateEmptySensorJobsBlob": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection"
                }
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@string(body('GetLatestEquipmentDowntimeRefData2'))",
                        "[]"
                      ]
                    }
                  }
                ]
              },
              "runAfter": {
                "GetLatestEquipmentDowntimeRefData2": [
                  "Succeeded"
                ]
              },
              "type": "If"
            }
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@empty(body('FilterEquipmentDowntimeScenario'))",
                "@false"
              ]
            }
          ]
        },
        "runAfter": {
          "FilterEquipmentDowntimeScenario": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "IfActiveProductQualityScenarioExists": {
        "actions": {
          "CreateFirstProductQualityScenarioRefData": {
            "inputs": {
              "body": "@body('ParseScenarioSensorMappings')?['value']",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/scenarios",
                "name": "productquality.json",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {
              "CreateFirstSensorItemBatchAttributeMappingsBlob": [
                "Succeeded"
              ]
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          },
          "CreateFirstSensorItemBatchAttributeMappingsBlob": {
            "inputs": {
              "body": "@body('ParseSensorItemBatchAttributeMappingsRefData')?['value']",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/sensorjobbatchattributes",
                "name": "@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {
              "GetLatestProductQualityScenarioRefData": [
                "Failed"
              ]
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          },
          "GetLatestProductQualityScenarioRefData": {
            "inputs": {
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "get",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath",
              "queries": {
                "inferContentType": true,
                "path": "sensorintelligencereferencedata/scenarios/productquality.json",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {
              "ParseSensorItemBatchAttributeMappingsRefData": [
                "Succeeded"
              ]
            },
            "type": "ApiConnection"
          },
          "GetSensorItemBatchAttributeMappings": {
            "inputs": {
              "authentication": "@parameters('DynamicsIdentityAuthentication')",
              "method": "GET",
              "uri": "@{parameters('EnvironmentUrl')}/data/SensorJobItemBatchAttributes"
            },
            "runAfter": {},
            "type": "Http"
          },
          "IfProductQualityScenarioRefDataChanged": {
            "actions": {
              "CreateSensorItemBatchAttributeMappingsBlob": {
                "inputs": {
                  "body": "@body('ParseSensorItemBatchAttributeMappingsRefData')?['value']",
                  "headers": {
                    "ReadFileMetadataFromServer": true
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azureblob']['connectionId']"
                    }
                  },
                  "method": "post",
                  "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                  "queries": {
                    "folderPath": "sensorintelligencereferencedata/sensorjobbatchattributes",
                    "name": "@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                    "queryParametersSingleEncoded": true
                  }
                },
                "runAfter": {},
                "runtimeConfiguration": {
                  "contentTransfer": {
                    "transferMode": "Chunked"
                  }
                },
                "type": "ApiConnection"
              },
              "UpdateProductQualityScenarioRefData": {
                "inputs": {
                  "body": "@body('ParseSensorItemBatchAttributeMappingsRefData')?['value']",
                  "headers": {
                    "ReadFileMetadataFromServer": true
                  },
                  "host": {
                    "connection": {
                      "name": "@parameters('$connections')['azureblob']['connectionId']"
                    }
                  },
                  "method": "put",
                  "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent('sensorintelligencereferencedata/scenarios/productquality.json'))}"
                },
                "runAfter": {
                  "CreateSensorItemBatchAttributeMappingsBlob": [
                    "Succeeded"
                  ]
                },
                "type": "ApiConnection"
              }
            },
            "expression": {
              "and": [
                {
                  "not": {
                    "equals": [
                      "@string(body('GetLatestProductQualityScenarioRefData'))",
                      "@string(body('ParseSensorItemBatchAttributeMappingsRefData')?['value'])"
                    ]
                  }
                }
              ]
            },
            "runAfter": {
              "GetLatestProductQualityScenarioRefData": [
                "Succeeded"
              ]
            },
            "type": "If"
          },
          "ParseSensorItemBatchAttributeMappingsRefData": {
            "inputs": {
              "content": "@body('GetSensorItemBatchAttributeMappings')",
              "schema": {
                "properties": {
                  "value": {
                    "items": {
                      "properties": {
                        "AttributeName": {
                          "type": "string"
                        },
                        "IsJobCompleted": {
                          "type": "string"
                        },
                        "ItemNumber": {
                          "type": "string"
                        },
                        "JobDataAreaId": {
                          "type": "string"
                        },
                        "JobId": {
                          "type": "string"
                        },
                        "JobRegistrationStartDateTime": {
                          "format": "date",
                          "type": "string"
                        },
                        "JobRegistrationStopDateTime": {
                          "format": "date",
                          "type": "string"
                        },
                        "MaximumAttributeTolerance": {
                          "type": "number"
                        },
                        "MinimumAttributeTolerance": {
                          "type": "number"
                        },
                        "OptimalAttributeTolerance": {
                          "type": "number"
                        },
                        "OrderId": {
                          "type": "string"
                        },
                        "SensorId": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "SensorId",
                        "JobId",
                        "JobDataAreaId",
                        "MachineNotReportingThreshold",
                        "IsJobInProgress"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            },
            "runAfter": {
              "GetSensorItemBatchAttributeMappings": [
                "Succeeded"
              ]
            },
            "type": "ParseJson"
          }
        },
        "else": {
          "actions": {
            "CreateFirstEmptyProductQualityScenarioRefData": {
              "inputs": {
                "body": "[]",
                "headers": {
                  "ReadFileMetadataFromServer": true
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                "queries": {
                  "folderPath": "sensorintelligencereferencedata/scenarios",
                  "name": "productquality.json",
                  "queryParametersSingleEncoded": true
                }
              },
              "runAfter": {
                "CreateNewEmptySensorItemBatchAttributeMappingsBlob": [
                  "Succeeded"
                ]
              },
              "runtimeConfiguration": {
                "contentTransfer": {
                  "transferMode": "Chunked"
                }
              },
              "type": "ApiConnection"
            },
            "CreateNewEmptySensorItemBatchAttributeMappingsBlob": {
              "inputs": {
                "body": "[]",
                "headers": {
                  "ReadFileMetadataFromServer": true
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                "queries": {
                  "folderPath": "sensorintelligencereferencedata/sensorjobbatchattributes",
                  "name": "@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                  "queryParametersSingleEncoded": true
                }
              },
              "runAfter": {
                "GetLatestProductQualityScenarioRefData2": [
                  "Failed"
                ]
              },
              "runtimeConfiguration": {
                "contentTransfer": {
                  "transferMode": "Chunked"
                }
              },
              "type": "ApiConnection"
            },
            "GetLatestProductQualityScenarioRefData2": {
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath",
                "queries": {
                  "inferContentType": true,
                  "path": "sensorintelligencereferencedata/scenarios/productquality.json",
                  "queryParametersSingleEncoded": true
                }
              },
              "runAfter": {},
              "type": "ApiConnection"
            },
            "IfLatestProductQualityScenarioRefDataIsNotEmpty": {
              "actions": {
                "CreateEmptySensorItemBatchAttributeMappingsBlob": {
                  "inputs": {
                    "body": "[]",
                    "headers": {
                      "ReadFileMetadataFromServer": true
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
                    "queries": {
                      "folderPath": "sensorintelligencereferencedata/sensorjobbatchattributes",
                      "name": "@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                      "queryParametersSingleEncoded": true
                    }
                  },
                  "runAfter": {},
                  "runtimeConfiguration": {
                    "contentTransfer": {
                      "transferMode": "Chunked"
                    }
                  },
                  "type": "ApiConnection"
                },
                "UpdateLatestProductQualityScenarioRefDataToEmpty": {
                  "inputs": {
                    "body": "[]",
                    "headers": {
                      "ReadFileMetadataFromServer": true
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                      }
                    },
                    "method": "put",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent('sensorintelligencereferencedata/scenarios/productquality.json'))}"
                  },
                  "runAfter": {
                    "CreateEmptySensorItemBatchAttributeMappingsBlob": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection"
                }
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@string(body('GetLatestProductQualityScenarioRefData2'))",
                        "[]"
                      ]
                    }
                  }
                ]
              },
              "runAfter": {
                "GetLatestProductQualityScenarioRefData2": [
                  "Succeeded"
                ]
              },
              "type": "If"
            }
          }
        },
        "expression": {
          "and": [
            {
              "equals": [
                "@empty(body('FilterProductQualityScenario'))",
                "@false"
              ]
            }
          ]
        },
        "runAfter": {
          "FilterProductQualityScenario": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "IfAssetMaintenanceScenarioRefDataChanged": {
        "actions": {
          "CreateAssetMaintenanceRefData": {
            "inputs": {
              "body": "@body('FilterAssetMaintenanceScenario')",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "post",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files",
              "queries": {
                "folderPath": "sensorintelligencereferencedata/assetmaintenancedata",
                "name": "@{concat('assetmaintenance', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                "queryParametersSingleEncoded": true
              }
            },
            "runAfter": {},
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            },
            "type": "ApiConnection"
          },
          "UpdateLatestAssetMaintenanceRefData": {
            "inputs": {
              "body": "@body('FilterAssetMaintenanceScenario')",
              "headers": {
                "ReadFileMetadataFromServer": true
              },
              "host": {
                "connection": {
                  "name": "@parameters('$connections')['azureblob']['connectionId']"
                }
              },
              "method": "put",
              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent('sensorintelligencereferencedata/scenarios/assetmaintenance.json'))}"
            },
            "runAfter": {
              "CreateAssetMaintenanceRefData": [
                "Succeeded"
              ]
            },
            "type": "ApiConnection"
          }
        },
        "expression": {
          "and": [
            {
              "not": {
                "equals": [
                  "@variables('latestAssetMaintenanceRefData')",
                  "@variables('newAssetMaintenanceRefData')"
                ]
              }
            }
          ]
        },
        "runAfter": {
          "newAssetMaintenanceRefData": [
            "Succeeded"
          ]
        },
        "type": "If"
      },
      "ParseScenarioSensorMappings": {
        "inputs": {
          "content": "@body('GetScenarioSensorMappings')",
          "schema": {
            "properties": {
              "value": {
                "items": {
                  "properties": {
                    "IsSensorActiveForScenario": {
                      "type": "string"
                    },
                    "Scenario": {
                      "type": "string"
                    },
                    "SensorId": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "SensorId",
                    "Scenario",
                    "IsSensorActiveForScenario"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "runAfter": {
          "GetScenarioSensorMappings": [
            "Succeeded"
          ]
        },
        "type": "ParseJson"
      },
      "latestAssetMaintenanceRefData": {
        "inputs": {
          "variables": [
            {
              "name": "latestAssetMaintenanceRefData",
              "type": "string",
              "value": "@{body('GetLatestAssetMaintenanceScenarioRefData')}"
            }
          ]
        },
        "runAfter": {
          "GetLatestAssetMaintenanceScenarioRefData": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      },
      "newAssetMaintenanceRefData": {
        "inputs": {
          "variables": [
            {
              "name": "newAssetMaintenanceRefData",
              "type": "string",
              "value": "@{body('FilterAssetMaintenanceScenario')}"
            }
          ]
        },
        "runAfter": {
          "latestAssetMaintenanceRefData": [
            "Succeeded"
          ]
        },
        "type": "InitializeVariable"
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "parameters": {
      "$connections": {
        "defaultValue": {},
        "type": "Object"
      },
      "DynamicsIdentityAuthentication": {
        "defaultValue": {},
        "type": "Object"
      },
      "EnvironmentUrl": {
        "defaultValue": "",
        "type": "String"
      },
      "StorageAccountName": {
        "defaultValue": "",
        "type": "String"
      }
    },
    "triggers": {
      "Recurrence": {
        "evaluatedRecurrence": {
          "frequency": "Minute",
          "interval": 2
        },
        "recurrence": {
          "frequency": "Minute",
          "interval": 2
        },
        "type": "Recurrence"
      }
    }
  },
  "parameters": {}
}
