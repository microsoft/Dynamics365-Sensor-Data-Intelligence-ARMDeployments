{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.1.6515",
      "templateHash": "15037960901615624330"
    }
  },
  "parameters": {
    "environmentUrl": {
      "type": "string",
      "defaultValue": "http://contoso.sandbox.operations.dynamics.com/",
      "metadata": {
        "description": "(Required) URL of the Dynamics 365 environment (example: https://contoso.sandbox.operations.dynamics.com/)"
      }
    },
    "existingIotHubResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group name of the IoT Hub to reuse. Leave empty to create a new IoT Hub."
      }
    },
    "existingIotHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource name of the IoT Hub to reuse. Leave empty to create a new IoT Hub."
      }
    }
  },
  "variables": {
    "$fxv#0": "{\r\n  \"definition\": {\r\n    \"$schema\": \"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#\",\r\n    \"actions\": {\r\n      \"AssetMaintenanceMappingsRefDataQuery\": {\r\n        \"inputs\": {\r\n          \"variables\": [\r\n            {\r\n              \"name\": \"AssetMaintenanceMappingsRefDataQuery\",\r\n              \"type\": \"string\",\r\n              \"value\": \"$filter=IsSensorActiveForScenario eq Microsoft.Dynamics.DataEntities.NoYes'Yes' and Scenario eq Microsoft.Dynamics.DataEntities.IoTIntCoreScenarioType'AssetMaintenance'\"\r\n            }\r\n          ]\r\n        },\r\n        \"runAfter\": {},\r\n        \"type\": \"InitializeVariable\"\r\n      },\r\n      \"CleanupAssetMaintenanceIfMoreThanOneBlob\": {\r\n        \"actions\": {\r\n          \"AssetMaintenanceDataCleanupLoop\": {\r\n            \"actions\": {\r\n              \"Delete_blob_(V2)_2\": {\r\n                \"inputs\": {\r\n                  \"headers\": {\r\n                    \"SkipDeleteIfFileNotFoundOnServer\": false\r\n                  },\r\n                  \"host\": {\r\n                    \"connection\": {\r\n                      \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\r\n                    }\r\n                  },\r\n                  \"method\": \"delete\",\r\n                  \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(items('AssetMaintenanceDataCleanupLoop')?['Path']))}\"\r\n                },\r\n                \"runAfter\": {},\r\n                \"type\": \"ApiConnection\"\r\n              }\r\n            },\r\n            \"foreach\": \"@body('FilterAssetMaintanenceDataOlderThan7Days')\",\r\n            \"runAfter\": {\r\n              \"FilterAssetMaintanenceDataOlderThan7Days\": [\r\n                \"Succeeded\"\r\n              ]\r\n            },\r\n            \"type\": \"Foreach\"\r\n          },\r\n          \"FilterAssetMaintanenceDataOlderThan7Days\": {\r\n            \"inputs\": {\r\n              \"from\": \"@body('ListAllAssetMaintenanceBlobs')?['value']\",\r\n              \"where\": \"@less(item()?['LastModified'], subtractFromTime(utcNow(), 7, 'Day'))\"\r\n            },\r\n            \"runAfter\": {},\r\n            \"type\": \"Query\"\r\n          }\r\n        },\r\n        \"expression\": {\r\n          \"and\": [\r\n            {\r\n              \"greater\": [\r\n                \"@length(body('ListAllAssetMaintenanceBlobs')?['value'])\",\r\n                1\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        \"runAfter\": {\r\n          \"ListAllAssetMaintenanceBlobs\": [\r\n            \"Succeeded\"\r\n          ]\r\n        },\r\n        \"type\": \"If\"\r\n      },\r\n      \"CleanupSensorItemBatchAttributeMappingsIfMoreThanOneBlob\": {\r\n        \"actions\": {\r\n          \"FilterSensorItemBatchAttributeMappingsOlderThan7Days\": {\r\n            \"inputs\": {\r\n              \"from\": \"@body('ListAllSensorJobItembatchAttributeMappings')?['value']\",\r\n              \"where\": \"@less(item()?['LastModified'], subtractFromTime(utcNow(), 7, 'Day'))\"\r\n            },\r\n            \"runAfter\": {},\r\n            \"type\": \"Query\"\r\n          },\r\n          \"SensorJobItemBatchAttributeMappingCleanupLoop\": {\r\n            \"actions\": {\r\n              \"Delete_blob_(V2)\": {\r\n                \"inputs\": {\r\n                  \"headers\": {\r\n                    \"SkipDeleteIfFileNotFoundOnServer\": false\r\n                  },\r\n                  \"host\": {\r\n                    \"connection\": {\r\n                      \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\r\n                    }\r\n                  },\r\n                  \"method\": \"delete\",\r\n                  \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(items('SensorJobItemBatchAttributeMappingCleanupLoop')?['Path']))}\"\r\n                },\r\n                \"runAfter\": {},\r\n                \"type\": \"ApiConnection\"\r\n              }\r\n            },\r\n            \"foreach\": \"@body('FilterSensorItemBatchAttributeMappingsOlderThan7Days')\",\r\n            \"runAfter\": {\r\n              \"FilterSensorItemBatchAttributeMappingsOlderThan7Days\": [\r\n                \"Succeeded\"\r\n              ]\r\n            },\r\n            \"type\": \"Foreach\"\r\n          }\r\n        },\r\n        \"expression\": {\r\n          \"and\": [\r\n            {\r\n              \"greater\": [\r\n                \"@length(body('ListAllSensorJobItembatchAttributeMappings')?['value'])\",\r\n                1\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        \"runAfter\": {\r\n          \"ListAllSensorJobItembatchAttributeMappings\": [\r\n            \"Succeeded\"\r\n          ]\r\n        },\r\n        \"type\": \"If\"\r\n      },\r\n      \"CleanupSensorJobsIfMoreThanOneBlob\": {\r\n        \"actions\": {\r\n          \"FilterSensorJobsBlobsOlderThan7Days\": {\r\n            \"inputs\": {\r\n              \"from\": \"@body('ListAllSensorJobsBlobs')?['value']\",\r\n              \"where\": \"@less(item()?['LastModified'], subtractFromTime(utcNow(), 7, 'Day'))\"\r\n            },\r\n            \"runAfter\": {},\r\n            \"type\": \"Query\"\r\n          },\r\n          \"SensorJobCleanupLoop\": {\r\n            \"actions\": {\r\n              \"DeleteOldSensorJobsBlob\": {\r\n                \"inputs\": {\r\n                  \"headers\": {\r\n                    \"SkipDeleteIfFileNotFoundOnServer\": false\r\n                  },\r\n                  \"host\": {\r\n                    \"connection\": {\r\n                      \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\r\n                    }\r\n                  },\r\n                  \"method\": \"delete\",\r\n                  \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(items('SensorJobCleanupLoop')?['Path']))}\"\r\n                },\r\n                \"runAfter\": {},\r\n                \"type\": \"ApiConnection\"\r\n              }\r\n            },\r\n            \"foreach\": \"@body('FilterSensorJobsBlobsOlderThan7Days')\",\r\n            \"runAfter\": {\r\n              \"FilterSensorJobsBlobsOlderThan7Days\": [\r\n                \"Succeeded\"\r\n              ]\r\n            },\r\n            \"type\": \"Foreach\"\r\n          }\r\n        },\r\n        \"expression\": {\r\n          \"and\": [\r\n            {\r\n              \"greater\": [\r\n                \"@length(body('ListAllSensorJobsBlobs')?['value'])\",\r\n                1\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        \"runAfter\": {\r\n          \"ListAllSensorJobsBlobs\": [\r\n            \"Succeeded\"\r\n          ]\r\n        },\r\n        \"type\": \"If\"\r\n      },\r\n      \"CreateAssetMaintenanceMappingsBlob\": {\r\n        \"inputs\": {\r\n          \"body\": \"@body('ParseAssetMaintenanceRefData')?['value']\",\r\n          \"headers\": {\r\n            \"ReadFileMetadataFromServer\": true\r\n          },\r\n          \"host\": {\r\n            \"connection\": {\r\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\r\n            }\r\n          },\r\n          \"method\": \"post\",\r\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\r\n          \"queries\": {\r\n            \"folderPath\": \"sensorintelligencereferencedata/assetmaintenancedata\",\r\n            \"name\": \"@{concat('assetmaintanence', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\r\n            \"queryParametersSingleEncoded\": true\r\n          }\r\n        },\r\n        \"runAfter\": {\r\n          \"ParseAssetMaintenanceRefData\": [\r\n            \"Succeeded\"\r\n          ]\r\n        },\r\n        \"runtimeConfiguration\": {\r\n          \"contentTransfer\": {\r\n            \"transferMode\": \"Chunked\"\r\n          }\r\n        },\r\n        \"type\": \"ApiConnection\"\r\n      },\r\n      \"CreateSensorItemBatchAttributeMappingsBlob\": {\r\n        \"inputs\": {\r\n          \"body\": \"@body('ParseSensorItemBatchAttributeMappingsRefData')?['value']\",\r\n          \"headers\": {\r\n            \"ReadFileMetadataFromServer\": true\r\n          },\r\n          \"host\": {\r\n            \"connection\": {\r\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\r\n            }\r\n          },\r\n          \"method\": \"post\",\r\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\r\n          \"queries\": {\r\n            \"folderPath\": \"sensorintelligencereferencedata/sensorjobbatchattributes\",\r\n            \"name\": \"@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\r\n            \"queryParametersSingleEncoded\": true\r\n          }\r\n        },\r\n        \"runAfter\": {\r\n          \"ParseSensorItemBatchAttributeMappingsRefData\": [\r\n            \"Succeeded\"\r\n          ]\r\n        },\r\n        \"runtimeConfiguration\": {\r\n          \"contentTransfer\": {\r\n            \"transferMode\": \"Chunked\"\r\n          }\r\n        },\r\n        \"type\": \"ApiConnection\"\r\n      },\r\n      \"CreateSensorJobsBlob\": {\r\n        \"inputs\": {\r\n          \"body\": \"@body('ParseSensorJobsRefData')?['value']\",\r\n          \"headers\": {\r\n            \"ReadFileMetadataFromServer\": true\r\n          },\r\n          \"host\": {\r\n            \"connection\": {\r\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\r\n            }\r\n          },\r\n          \"method\": \"post\",\r\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\r\n          \"queries\": {\r\n            \"folderPath\": \"sensorintelligencereferencedata/sensorjobs\",\r\n            \"name\": \"@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\r\n            \"queryParametersSingleEncoded\": true\r\n          }\r\n        },\r\n        \"runAfter\": {\r\n          \"ParseSensorJobsRefData\": [\r\n            \"Succeeded\"\r\n          ]\r\n        },\r\n        \"runtimeConfiguration\": {\r\n          \"contentTransfer\": {\r\n            \"transferMode\": \"Chunked\"\r\n          }\r\n        },\r\n        \"type\": \"ApiConnection\"\r\n      },\r\n      \"GetAssetMaintenanceMappings\": {\r\n        \"inputs\": {\r\n          \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\r\n          \"method\": \"GET\",\r\n          \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorScenarioMappings?@{variables('AssetMaintenanceMappingsRefDataQuery')}\"\r\n        },\r\n        \"runAfter\": {\r\n          \"AssetMaintenanceMappingsRefDataQuery\": [\r\n            \"Succeeded\"\r\n          ]\r\n        },\r\n        \"type\": \"Http\"\r\n      },\r\n      \"GetSensorItemBatchAttributeMappings\": {\r\n        \"inputs\": {\r\n          \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\r\n          \"method\": \"GET\",\r\n          \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorJobItemBatchAttributes\"\r\n        },\r\n        \"runAfter\": {},\r\n        \"type\": \"Http\"\r\n      },\r\n      \"GetSensorJobs\": {\r\n        \"inputs\": {\r\n          \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\r\n          \"method\": \"GET\",\r\n          \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorJobs\"\r\n        },\r\n        \"runAfter\": {},\r\n        \"type\": \"Http\"\r\n      },\r\n      \"ListAllAssetMaintenanceBlobs\": {\r\n        \"inputs\": {\r\n          \"host\": {\r\n            \"connection\": {\r\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\r\n            }\r\n          },\r\n          \"method\": \"get\",\r\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/foldersV2/@{encodeURIComponent(encodeURIComponent('/sensorintelligencereferencedata/assetmaintenancedata'))}\",\r\n          \"queries\": {\r\n            \"nextPageMarker\": \"\",\r\n            \"useFlatListing\": false\r\n          }\r\n        },\r\n        \"runAfter\": {},\r\n        \"type\": \"ApiConnection\"\r\n      },\r\n      \"ListAllSensorJobItembatchAttributeMappings\": {\r\n        \"inputs\": {\r\n          \"host\": {\r\n            \"connection\": {\r\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\r\n            }\r\n          },\r\n          \"method\": \"get\",\r\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/foldersV2/@{encodeURIComponent(encodeURIComponent('/sensorintelligencereferencedata/sensorjobbatchattributes'))}\",\r\n          \"queries\": {\r\n            \"nextPageMarker\": \"\",\r\n            \"useFlatListing\": false\r\n          }\r\n        },\r\n        \"runAfter\": {},\r\n        \"type\": \"ApiConnection\"\r\n      },\r\n      \"ListAllSensorJobsBlobs\": {\r\n        \"inputs\": {\r\n          \"host\": {\r\n            \"connection\": {\r\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\r\n            }\r\n          },\r\n          \"method\": \"get\",\r\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/foldersV2/@{encodeURIComponent(encodeURIComponent('/sensorintelligencereferencedata/sensorjobs'))}\",\r\n          \"queries\": {\r\n            \"nextPageMarker\": \"\",\r\n            \"useFlatListing\": false\r\n          }\r\n        },\r\n        \"runAfter\": {},\r\n        \"type\": \"ApiConnection\"\r\n      },\r\n      \"ParseAssetMaintenanceRefData\": {\r\n        \"inputs\": {\r\n          \"content\": \"@body('GetAssetMaintenanceMappings')\",\r\n          \"schema\": {\r\n            \"properties\": {\r\n              \"value\": {\r\n                \"type\": \"array\"\r\n              }\r\n            },\r\n            \"type\": \"object\"\r\n          }\r\n        },\r\n        \"runAfter\": {\r\n          \"GetAssetMaintenanceMappings\": [\r\n            \"Succeeded\"\r\n          ]\r\n        },\r\n        \"type\": \"ParseJson\"\r\n      },\r\n      \"ParseSensorItemBatchAttributeMappingsRefData\": {\r\n        \"inputs\": {\r\n          \"content\": \"@body('GetSensorItemBatchAttributeMappings')\",\r\n          \"schema\": {\r\n            \"properties\": {\r\n              \"value\": {\r\n                \"type\": \"array\"\r\n              }\r\n            },\r\n            \"type\": \"object\"\r\n          }\r\n        },\r\n        \"runAfter\": {\r\n          \"GetSensorItemBatchAttributeMappings\": [\r\n            \"Succeeded\"\r\n          ]\r\n        },\r\n        \"type\": \"ParseJson\"\r\n      },\r\n      \"ParseSensorJobsRefData\": {\r\n        \"inputs\": {\r\n          \"content\": \"@body('GetSensorJobs')\",\r\n          \"schema\": {\r\n            \"properties\": {\r\n              \"value\": {\r\n                \"type\": \"array\"\r\n              }\r\n            },\r\n            \"type\": \"object\"\r\n          }\r\n        },\r\n        \"runAfter\": {\r\n          \"GetSensorJobs\": [\r\n            \"Succeeded\"\r\n          ]\r\n        },\r\n        \"type\": \"ParseJson\"\r\n      }\r\n    },\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"outputs\": {},\r\n    \"parameters\": {\r\n      \"$connections\": {\r\n        \"defaultValue\": {},\r\n        \"type\": \"Object\"\r\n      },\r\n      \"DynamicsIdentityAuthentication\": {\r\n        \"defaultValue\": {},\r\n        \"type\": \"Object\"\r\n      },\r\n      \"EnvironmentUrl\": {\r\n        \"defaultValue\": \"\",\r\n        \"type\": \"String\"\r\n      },\r\n      \"StorageAccountName\": {\r\n        \"defaultValue\": \"\",\r\n        \"type\": \"String\"\r\n      }\r\n    },\r\n    \"triggers\": {\r\n      \"Recurrence\": {\r\n        \"evaluatedRecurrence\": {\r\n          \"frequency\": \"Minute\",\r\n          \"interval\": 3\r\n        },\r\n        \"recurrence\": {\r\n          \"frequency\": \"Minute\",\r\n          \"interval\": 3\r\n        },\r\n        \"type\": \"Recurrence\"\r\n      }\r\n    }\r\n  },\r\n  \"parameters\": {}\r\n}\r\n",
    "resourcesLocation": "[resourceGroup().location]",
    "uniqueIdentifier": "[uniqueString(resourceGroup().id)]",
    "createNewIotHub": "[empty(parameters('existingIotHubName'))]",
    "azureServiceBusDataReceiverRoleId": "4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
    "azureStorageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
    "trimmedEnvironmentUrl": "[trim(parameters('environmentUrl'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}/{2}', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default', 'iotoutputstoragev2')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}/{2}', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default', 'sensorintelligencereferencedata')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues/authorizationRules",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}/{2}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule')]",
      "properties": {
        "rights": [
          "Send"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]"
      ]
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
      "properties": {
        "enablePartitioning": false,
        "enableBatchedOperations": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/sourcecontrols",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}/{1}', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')), 'web')]",
      "kind": "gitHubHostedTemplate",
      "properties": {
        "repoUrl": "https://github.com/AndreasHassing/AzureStreamAnalyticsToRedisFunction",
        "branch": "main",
        "isManualIntegration": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', 'appDeploymentWait')]",
        "[resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Cache/redis",
      "apiVersion": "2021-06-01",
      "name": "[format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {
        "redisVersion": "4.1.14",
        "sku": {
          "name": "Basic",
          "family": "C",
          "capacity": 0
        }
      }
    },
    {
      "condition": "[variables('createNewIotHub')]",
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2021-07-02",
      "name": "[format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "B1",
        "capacity": 1
      },
      "properties": {}
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-03-01",
      "name": "[format('msdyn-iiot-sdi-appsvcplan-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "F1",
        "capacity": 0
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('msdyn-iiot-sdi-appsvcplan-{0}', variables('uniqueIdentifier')))]",
        "httpsOnly": true,
        "siteConfig": {
          "minTlsVersion": "1.2",
          "ftpsState": "Disabled",
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', format('msdyniiotst{0}', variables('uniqueIdentifier')), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "RedisConnectionString",
              "value": "[format('{0}:{1},password={2},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier')))).hostName, reference(resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier')))).sslPort, listKeys(resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier'))), '2021-06-01').primaryKey)]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('msdyn-iiot-sdi-appsvcplan-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "appDeploymentWait",
      "location": "[variables('resourcesLocation')]",
      "kind": "AzurePowerShell",
      "properties": {
        "retentionInterval": "PT1H",
        "azPowerShellVersion": "7.3.2",
        "scriptContent": "Start-Sleep -Seconds 30"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.StreamAnalytics/streamingjobs",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('msdyn-iiot-sdi-stream-analytics-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "sku": {
          "name": "Standard"
        },
        "compatibilityLevel": "1.2",
        "outputStartMode": "JobStartTime",
        "inputs": [
          {
            "name": "IotInput",
            "properties": {
              "type": "Stream",
              "datasource": {
                "type": "Microsoft.Devices/IotHubs",
                "properties": {
                  "iotHubNamespace": "[if(variables('createNewIotHub'), format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier')), parameters('existingIotHubName'))]",
                  "sharedAccessPolicyName": "[if(variables('createNewIotHub'), listkeys(resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier'))), '2021-07-02').value[1].keyName, listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingIotHubResourceGroupName')), 'Microsoft.Devices/IotHubs', parameters('existingIotHubName')), '2021-07-02').value[1].keyName)]",
                  "sharedAccessPolicyKey": "[if(variables('createNewIotHub'), listkeys(resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier'))), '2021-07-02').value[1].primaryKey, listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingIotHubResourceGroupName')), 'Microsoft.Devices/IotHubs', parameters('existingIotHubName')), '2021-07-02').value[1].primaryKey)]",
                  "endpoint": "messages/events",
                  "consumerGroupName": "$Default"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8"
                }
              }
            }
          },
          {
            "name": "SensorJobsReferenceInput",
            "properties": {
              "type": "Reference",
              "datasource": {
                "type": "Microsoft.Storage/Blob",
                "properties": {
                  "authenticationMode": "Msi",
                  "storageAccounts": [
                    {
                      "accountName": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]"
                    }
                  ],
                  "container": "sensorintelligencereferencedata",
                  "pathPattern": "sensorjobs/sensorjobs{date}T{time}.json",
                  "dateFormat": "yyyy-MM-dd",
                  "timeFormat": "HH-mm"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8"
                }
              }
            }
          }
        ],
        "outputs": [
          {
            "name": "MetricOutput",
            "properties": {
              "datasource": {
                "type": "Microsoft.AzureFunction",
                "properties": {
                  "functionAppName": "[format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier'))]",
                  "functionName": "AzureStreamAnalyticsToRedis",
                  "apiKey": "[listKeys(format('{0}/host/default', resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))), '2021-02-01').functionKeys.default]"
                }
              }
            }
          },
          {
            "name": "ServiceBusOutput",
            "properties": {
              "datasource": {
                "type": "Microsoft.ServiceBus/Queue",
                "properties": {
                  "serviceBusNamespace": "[format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier'))]",
                  "queueName": "outbound-insights",
                  "authenticationMode": "ConnectionString",
                  "sharedAccessPolicyName": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule'), '2021-06-01-preview').keyName]",
                  "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule'), '2021-06-01-preview').primaryKey]"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8",
                  "format": "Array"
                }
              }
            }
          }
        ],
        "transformation": {
          "name": "input2output",
          "properties": {
            "query": "/* Query for resource downtime scenario */\nWITH FakeHeartBeat AS /* Generate an event for every time window  */\n(\n  SELECT COUNT(*)\n  FROM IotInput\n  TIMESTAMP BY EventEnqueuedUtcTime\n  GROUP BY TumblingWindow(minute, 1)\n),\nAllSensors AS /* generate one event per sensor per period */\n(\n  SELECT\n    SensorJobsReferenceInput.SensorId AS machineId,\n    SensorJobsReferenceInput.IsJobInProgress AS isJobInProgress,\n    SensorJobsReferenceInput.JobId AS jobId,\n    SensorJobsReferenceInput.DataAreaId AS dataAreaId,\n    cast(SensorJobsReferenceInput.MachineNotReportingThreshold as BIGINT) AS thresholdMins,\n    System.Timestamp AS timestamp\n  FROM FakeHeartBeat JOIN SensorJobsReferenceInput\n  ON  1 = 1 /* Cross Join */\n),\nActiveSensors AS /* compute how many events have been received in the time window from each device */\n(\n  SELECT\n    deviceId as machineId,\n    COUNT(*) AS eventCount,\n    System.Timestamp AS timestamp\n  FROM IotInput\n  TIMESTAMP BY EventEnqueuedUtcTime\n  GROUP BY deviceId, TumblingWindow(minute, 1)\n),\nAllSensorEventCounts AS /* Find event count for every device, also those with zero events if they should be in progress */\n(\n  SELECT\n    AllSensors.*,\n    CASE WHEN ActiveSensors.eventCount IS NULL THEN 0\n      ELSE ActiveSensors.eventCount\n    END AS eventCount\n  FROM AllSensors LEFT JOIN ActiveSensors\n  ON\n    ActiveSensors.machineId = AllSensors.machineId\n    AND DATEDIFF(ms, ActiveSensors, AllSensors) = 0\n  WHERE\n    ActiveSensors.eventCount IS NOT NULL   \n    OR AllSensors.isJobInProgress = 'Yes'\n),\nSensorEventCountsWithinTwoThresholds AS /* Filter out all events earlier than two thresholds ago */\n(\n  SELECT *\n  FROM AllSensorEventCounts\n  WHERE DATEDIFF(minute, timestamp, System.Timestamp) < 2*thresholdMins\n),\nLastSensorEvents AS /* Find the number of minutes since each device last recieved events */\n(\n  SELECT\n    *,\n    COALESCE(\n      DATEDIFF(\n        minute,\n        LAG(Timestamp) OVER (PARTITION BY machineId LIMIT DURATION(hour, 12) WHEN eventCount > 0), /* Maximum lookback is 12 hours, data only goes two thresholds back */\n        Timestamp\n      ),\n      2*thresholdmins\n    ) AS minutesSinceLastEvent\n  FROM SensorEventCountsWithinTwoThresholds\n),\nStartedAndStoppedSensors AS /* Find devices that stopped sending or started sending */\n(\n  (SELECT\n    *,\n    'TRUE' as isMachineRunning\n  FROM LastSensorEvents\n  WHERE\n  (minutesSinceLastEvent >= thresholdMins AND eventCount > 0)\n  )\n  UNION\n  (SELECT\n    *,\n    'FALSE' as isMachineRunning\n  FROM LastSensorEvents\n  WHERE\n    (minutesSinceLastEvent = thresholdMins AND eventCount = 0)\n  )\n)\n\n/* Output metrics to metric output */\nSELECT\nCONCAT('MachineReportingStatus:', machineId) AS metricKey,\ntimestamp,\neventCount as value\nINTO MetricOutput\nFROM AllSensorEventCounts\n\n/* Output notifications to service bus */\nSELECT\nmachineId,\njobId,\ndataAreaId,\nisMachineRunning,\ntimestamp AS NotificationRaisedDateTime,\n'MachineReportingStatus' AS Type\ninto ServiceBusOutput\nFrom StartedAndStoppedSensors\n        "
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule')]",
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Web/sites/sourcecontrols', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')), 'web')]",
        "[resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default', 'sensorintelligencereferencedata')]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))), variables('azureServiceBusDataReceiverRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureServiceBusDataReceiverRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))).principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} read from Service Bus queues.', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))), variables('azureStorageBlobDataContributorRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureStorageBlobDataContributorRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))).principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} insert blobs into the reference data Storage Account.', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-stream-analytics-{0}', variables('uniqueIdentifier'))), variables('azureStorageBlobDataContributorRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureStorageBlobDataContributorRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-stream-analytics-{0}', variables('uniqueIdentifier'))), '2021-10-01-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} read from the reference data Storage Account. Stream Analytics needs Contributor role to function, even if it only reads.', format('msdyn-iiot-sdi-stream-analytics-{0}', variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-stream-analytics-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {
        "displayName": "[format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier'))]",
        "parameterValueSet": {
          "name": "managedIdentityAuth",
          "values": {
            "namespaceEndpoint": {
              "value": "[replace(replace(reference(resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))).serviceBusEndpoint, 'https://', 'sb://'), ':443', '')]"
            }
          }
        },
        "api": {
          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'servicebus')]",
          "type": "Microsoft.Web/locations/managedApis"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {
        "displayName": "[format('msdyn-iiot-sdi-storageaccountbusconnection-{0}', variables('uniqueIdentifier'))]",
        "parameterValueSet": {
          "name": "managedIdentityAuth",
          "values": {}
        },
        "api": {
          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'azureblob')]",
          "type": "Microsoft.Web/locations/managedApis"
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[format('msdyn-iiot-sdi-logicapp-refdata-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))))]": {}
        }
      },
      "properties": {
        "definition": "[json(variables('$fxv#0')).definition]",
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'azureblob')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier')))]",
                "connectionName": "azureblob",
                "connectionProperties": {
                  "authentication": {
                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          },
          "EnvironmentUrl": {
            "value": "[variables('trimmedEnvironmentUrl')]"
          },
          "StorageAccountName": {
            "value": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]"
          },
          "DynamicsIdentityAuthentication": {
            "value": {
              "audience": "00000015-0000-0000-c000-000000000000",
              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
              "type": "ManagedServiceIdentity"
            }
          }
        },
        "accessControl": {
          "contents": {
            "allowedCallerIpAddresses": [
              {
                "addressRange": "0.0.0.0-0.0.0.0"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[format('msdyn-iiot-sdi-logicapp-notification-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))))]": {}
        }
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "When_Insight_is_added_to_outbound_queue_(peek-lock)": {
              "type": "ApiConnection",
              "recurrence": {
                "frequency": "Second",
                "interval": 30
              },
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                  }
                },
                "method": "get",
                "path": "[format('/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/messages/head/peek', 'outbound-insights')]",
                "queries": {
                  "queryType": "Main"
                }
              }
            }
          },
          "actions": {
            "Parse_Insight": {
              "inputs": {
                "content": "@decodeBase64(triggerBody()?['ContentData'])",
                "schema": {
                  "properties": {
                    "NotificationRaisedDateTime": {
                      "type": "string"
                    },
                    "Type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "runAfter": {},
              "type": "ParseJson"
            },
            "Notification_GUID": {
              "inputs": {
                "variables": [
                  {
                    "name": "NotificationGUID",
                    "type": "string",
                    "value": "@triggerBody()?['LockToken']"
                  }
                ]
              },
              "runAfter": {
                "Parse_Insight": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Compose_Notification_object": {
              "inputs": {
                "Id": "@{variables('NotificationGUID')}",
                "NotificationRaisedDateTime": "@{body('Parse_Insight')?['NotificationRaisedDateTime']}",
                "Payload": "@decodeBase64(triggerBody()?['ContentData'])",
                "Type": "@{body('Parse_Insight')?['Type']}"
              },
              "runAfter": {
                "Notification_GUID": [
                  "Succeeded"
                ]
              },
              "type": "Compose"
            },
            "Post_Notification": {
              "inputs": {
                "authentication": {
                  "audience": "00000015-0000-0000-c000-000000000000",
                  "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
                  "type": "ManagedServiceIdentity"
                },
                "body": "@outputs('Compose_Notification_object')",
                "headers": {
                  "Content-Type": "application/json"
                },
                "method": "POST",
                "uri": "[uri(variables('trimmedEnvironmentUrl'), '/data/OperationsNotifications')]"
              },
              "runAfter": {
                "Compose_Notification_object": [
                  "Succeeded"
                ]
              },
              "type": "Http"
            },
            "Complete_Insight_message_in_queue": {
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                  }
                },
                "method": "delete",
                "path": "[format('/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/messages/complete', 'outbound-insights')]",
                "queries": {
                  "lockToken": "@triggerBody()?['LockToken']",
                  "queueType": "Main",
                  "sessionId": ""
                }
              },
              "runAfter": {
                "Post_Notification": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier')))]",
                "connectionName": "servicebus",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity",
                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
                  }
                }
              }
            }
          }
        },
        "accessControl": {
          "contents": {
            "allowedCallerIpAddresses": [
              {
                "addressRange": "0.0.0.0-0.0.0.0"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      ]
    }
  ],
  "outputs": {
    "applicationId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))).clientId]",
      "metadata": {
        "description": "AAD Application ID to allowlist in Dynamics"
      }
    }
  }
}