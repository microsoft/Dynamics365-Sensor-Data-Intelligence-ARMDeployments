{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.18.56646",
      "templateHash": "13120097067538460040"
    }
  },
  "parameters": {
    "supplyChainManagementEnvironmentURL": {
      "type": "string",
      "defaultValue": "http://contoso-uat.sandbox.operations.dynamics.com/",
      "metadata": {
        "description": "(Required) URL of the target Dynamics 365 Supply Chain Management environment (example: https://contoso-uat.sandbox.operations.dynamics.com/)"
      }
    },
    "existingIotHubResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Resource group name of an Azure IoT Hub to reuse."
      }
    },
    "existingIotHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Resource name of an Azure IoT Hub to reuse."
      }
    }
  },
  "variables": {
    "$fxv#0": "CREATE TABLE IotInput(\r\n  eventEnqueuedUtcTime datetime,\r\n  sensorId nvarchar(max)\r\n);\r\n\r\nCREATE TABLE SensorJobsReferenceInput(\r\n  sensorId nvarchar(max),\r\n  jobId nvarchar(max),\r\n  isJobInProgress nvarchar(max),\r\n  jobDataAreaId nvarchar(max),\r\n  machineNotReportingThreshold bigint\r\n);\r\n\r\n/* Query for machine reporting status scenario (equipment downtime) */\r\nWITH FakeHeartBeat AS /* Generate an event for every time window  */\r\n(\r\n  SELECT COUNT(*)\r\n  FROM IotInput\r\n  TIMESTAMP BY eventEnqueuedUtcTime\r\n  GROUP BY HoppingWindow(Duration(hour, 12), Hop(minute, 1))\r\n),\r\nAllSensors AS /* generate one event per sensor per period */\r\n(\r\n  SELECT\r\n    SensorJobsReferenceInput.SensorId AS machineId,\r\n    SensorJobsReferenceInput.IsJobInProgress AS isJobInProgress,\r\n    SensorJobsReferenceInput.JobId AS jobId,\r\n    SensorJobsReferenceInput.JobDataAreaId AS dataAreaId,\r\n    SensorJobsReferenceInput.MachineNotReportingThreshold AS thresholdMins,\r\n    System.Timestamp() AS timestamp\r\n  FROM FakeHeartBeat\r\n  JOIN SensorJobsReferenceInput\r\n  ON 1 = 1 /* Cross Join */\r\n),\r\nActiveSensors AS /* compute how many events have been received in the time window from each device */\r\n(\r\n  SELECT\r\n    sensorId AS machineId,\r\n    COUNT(*) AS eventCount,\r\n    System.Timestamp() AS timestamp\r\n  FROM IotInput\r\n  TIMESTAMP BY eventEnqueuedUtcTime\r\n  GROUP BY sensorId, TumblingWindow(minute, 1)\r\n),\r\nAllSensorEventCounts AS /* Find event count for every device, also those with zero events if they should be in progress */\r\n(\r\n  SELECT\r\n    AllSensors.*,\r\n    CASE WHEN ActiveSensors.eventCount IS NULL THEN 0\r\n      ELSE ActiveSensors.eventCount\r\n    END AS eventCount\r\n  FROM AllSensors LEFT JOIN ActiveSensors\r\n  ON\r\n    ActiveSensors.machineId = AllSensors.machineId\r\n    AND DATEDIFF(ms, ActiveSensors, AllSensors) = 0\r\n),\r\nSensorEventCountsWithinTwoThresholds AS /* Filter out all events earlier than two thresholds ago */\r\n(\r\n  SELECT *\r\n  FROM AllSensorEventCounts\r\n  WHERE DATEDIFF(minute, timestamp, System.Timestamp) < 2*thresholdMins\r\n  AND AllSensorEventCounts.jobId IS NOT NULL\r\n  AND AllSensorEventCounts.isJobInProgress = 'Yes'\r\n),\r\nLastSensorEvents AS /* Find the number of minutes since each device last recieved events */\r\n(\r\n  SELECT\r\n    *,\r\n    COALESCE(\r\n      DATEDIFF(\r\n        minute,\r\n        LAG(timestamp) OVER (PARTITION BY machineId LIMIT DURATION(hour, 12) WHEN eventCount > 0), /* Maximum lookback is 12 hours, data only goes two thresholds back */\r\n        timestamp\r\n      ),\r\n      2*thresholdmins\r\n    ) AS minutesSinceLastEvent\r\n  FROM SensorEventCountsWithinTwoThresholds\r\n),\r\nStartedAndStoppedSensors AS /* Find devices that stopped sending or started sending */\r\n(\r\n  (SELECT\r\n    *,\r\n    'TRUE' AS isMachineRunning\r\n  FROM LastSensorEvents\r\n  WHERE\r\n  (minutesSinceLastEvent >= thresholdMins AND eventCount > 0))\r\n  UNION\r\n  (SELECT\r\n    *,\r\n    'FALSE' AS isMachineRunning\r\n  FROM LastSensorEvents\r\n  WHERE\r\n    (minutesSinceLastEvent = thresholdMins AND eventCount = 0)\r\n  )\r\n)\r\n\r\nSELECT\r\n  machineId,\r\n  jobId,\r\n  dataAreaId,\r\n  isMachineRunning,\r\n  timestamp,\r\n  'MachineReportingStatus' AS notificationType\r\nINTO NotificationOutput\r\nFROM StartedAndStoppedSensors\r\n\r\nSELECT\r\n  CONCAT('MachineReportingStatus:', machineId) AS metricKey,\r\n  DATEDIFF(millisecond, CAST('1970-01-01' as datetime), timestamp) AS uts,\r\n  CAST(EventCount AS FLOAT) AS val\r\nINTO MetricOutput\r\nFROM AllSensorEventCounts\r\n",
    "$fxv#1": "CREATE TABLE IotInput(\r\n  eventEnqueuedUtcTime datetime,\r\n  sensorId nvarchar(max),\r\n  value float\r\n);\r\n\r\nCREATE TABLE ScenarioMappings(\r\n  sensorId nvarchar(max),\r\n  scenario nvarchar(max),\r\n  isSensorActiveForScenario nvarchar(max)\r\n);\r\n\r\nSELECT\r\n  I.sensorId,\r\n  System.Timestamp AS timestamp,\r\n  SUM(I.value) AS counterValue,\r\n  'AssetMaintenance' AS notificationType\r\nINTO NotificationOutput\r\nFROM IotInput I TIMESTAMP BY I.eventEnqueuedUtcTime\r\nJOIN ScenarioMappings SM ON SM.sensorId = I.sensorId\r\nWHERE\r\n  SM.scenario = 'AssetMaintenance'\r\n  AND SM.isSensorActiveForScenario = 'Yes'\r\nGROUP BY I.sensorId, TumblingWindow(hour, 3)\r\n",
    "$fxv#2": "CREATE TABLE IotInput(\r\n  eventEnqueuedUtcTime datetime,\r\n  sensorId nvarchar(max),\r\n  value float\r\n);\r\n\r\nCREATE TABLE SensorJobItemBatchAttributeReferenceInput(\r\n  sensorId nvarchar(max),\r\n  jobId nvarchar(max),\r\n  orderId nvarchar(max),\r\n  itemNumber nvarchar(max),\r\n  attributeName nvarchar(max),\r\n  jobDataAreaId nvarchar(max),\r\n  jobRegistrationStartDateTime datetime,\r\n  jobRegistrationStopDateTime datetime,\r\n  isJobCompleted nvarchar(max),\r\n  maximumAttributeTolerance float,\r\n  minimumAttributeTolerance float,\r\n  optimalAttributeValue float\r\n);\r\n\r\nWITH SensorJobItemBatchAttributeValues AS\r\n(\r\n  SELECT\r\n    I.sensorId,\r\n    I.eventEnqueuedUtcTime,\r\n    I.value,\r\n    R.jobId,\r\n    R.orderId,\r\n    R.itemNumber,\r\n    R.attributeName,\r\n    R.jobDataAreaId,\r\n    R.jobRegistrationStartDateTime,\r\n    R.jobRegistrationStopDateTime,\r\n    R.isJobCompleted,\r\n    R.maximumAttributeTolerance,\r\n    R.minimumAttributeTolerance,\r\n    R.optimalAttributeValue,\r\n    CASE\r\n      WHEN I.value >= R.minimumAttributeTolerance AND I.value <= R.maximumAttributeTolerance THEN 1\r\n      ELSE 0\r\n    END AS attributeValueInRange\r\n  FROM IotInput I\r\n  TIMESTAMP BY I.eventEnqueuedUtcTime\r\n  JOIN SensorJobItemBatchAttributeReferenceInput R\r\n  ON I.sensorId = R.sensorId\r\n  -- Only consider jobs which are in progress and signals which came after the start of the job.\r\n  WHERE DATEDIFF(year, R.jobRegistrationStopDateTime, CAST('1900-01-01' as datetime)) = 0\r\n  AND I.eventEnqueuedUtcTime >= R.jobRegistrationStartDateTime\r\n),\r\nSensorJobItemBatchAttributeValuesState AS\r\n(\r\n  SELECT\r\n  *,\r\n   /** Determine value for last signal was in range or not having same partition values as current signal.\r\n       previousSignalValueInRange will be null if there was no previous signal */\r\n  LAG(attributeValueInRange) OVER\r\n    (PARTITION BY\r\n      sensorId,\r\n      jobId,\r\n      orderId,\r\n      itemNumber,\r\n      attributeName,\r\n      jobDataAreaId\r\n      LIMIT DURATION(minute, 15)\r\n    ) AS previousSignalValueInRange\r\n    FROM SensorJobItemBatchAttributeValues\r\n)\r\n\r\nSELECT\r\n  CONCAT('ProductQuality:', jobId, ':', attributeName) AS metricKey,\r\n  DATEDIFF(millisecond, CAST('1970-01-01' as datetime), eventEnqueuedUtcTime) AS uts,\r\n  value AS val\r\nINTO MetricOutput\r\nfrom SensorJobItemBatchAttributeValues\r\n\r\nSELECT\r\n  jobDataAreaId AS dataAreaId,\r\n  sensorId AS machineId,\r\n  jobId AS jobId,\r\n  orderId AS orderId,\r\n  itemNumber AS itemId,\r\n  minimumAttributeTolerance AS minValue,\r\n  maximumAttributeTolerance AS maxValue,\r\n  optimalAttributeValue AS targetValue,\r\n  attributeName AS batchAttribId,\r\n  sensorId AS sensorId,\r\n  value AS sensorReading,\r\n  eventEnqueuedUtcTime AS timestamp,\r\n  eventEnqueuedUtcTime AS sensorTimestamp,\r\n  System.Timestamp AS processingTimestamp,\r\n  CASE\r\n    WHEN attributeValueInRange = 1 THEN 'TRUE'\r\n    ELSE 'FALSE'\r\n  END AS validAttributeSignal,\r\n  'ProductQualityValidation' AS notificationType\r\nINTO NotificationOutput\r\nFROM SensorJobItemBatchAttributeValuesState\r\n-- This ensures that we are not sending the notification twice.\r\nWHERE\r\n(\r\n  (\r\n    attributeValueInRange = 0 AND\r\n    (previousSignalValueInRange IS NULL OR previousSignalValueInRange = 1)\r\n  )\r\n  OR\r\n  (\r\n    attributeValueInRange = 1 AND\r\n    previousSignalValueInRange = 0\r\n  )\r\n)\r\n\r\n",
    "$fxv#3": "{\n  \"definition\": {\n    \"$schema\": \"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#\",\n    \"actions\": {\n      \"CreateFirstAssetMaintenanceRefData\": {\n        \"inputs\": {\n          \"body\": \"@body('FilterAssetMaintenanceScenario')\",\n          \"headers\": {\n            \"ReadFileMetadataFromServer\": true\n          },\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"post\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n          \"queries\": {\n            \"folderPath\": \"sensorintelligencereferencedata/assetmaintenancedata\",\n            \"name\": \"@{concat('assetmaintenance', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMaintenanceScenarioRefData\": [\n            \"Failed\"\n          ]\n        },\n        \"runtimeConfiguration\": {\n          \"contentTransfer\": {\n            \"transferMode\": \"Chunked\"\n          }\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"CreateFirstAssetMaintenanceScenarioRefData\": {\n        \"inputs\": {\n          \"body\": \"@body('FilterAssetMaintenanceScenario')\",\n          \"headers\": {\n            \"ReadFileMetadataFromServer\": true\n          },\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"post\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n          \"queries\": {\n            \"folderPath\": \"sensorintelligencereferencedata/scenarios/\",\n            \"name\": \"assetmaintenance.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"CreateFirstAssetMaintenanceRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"runtimeConfiguration\": {\n          \"contentTransfer\": {\n            \"transferMode\": \"Chunked\"\n          }\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"FilterAssetMaintenanceScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'AssetMaintenance')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterEquipmentDowntimeScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'MachineReportingStatus')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"FilterProductQualityScenario\": {\n        \"inputs\": {\n          \"from\": \"@body('ParseScenarioSensorMappings')?['value']\",\n          \"where\": \"@equals(item()['Scenario'], 'ProductQualityValidation')\"\n        },\n        \"runAfter\": {\n          \"ParseScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Query\"\n      },\n      \"GetLatestAssetMaintenanceScenarioRefData\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n          \"queries\": {\n            \"inferContentType\": true,\n            \"path\": \"sensorintelligencereferencedata/scenarios/assetmaintenance.json\",\n            \"queryParametersSingleEncoded\": true\n          }\n        },\n        \"runAfter\": {\n          \"FilterAssetMaintenanceScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"GetScenarioSensorMappings\": {\n        \"inputs\": {\n          \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n          \"method\": \"GET\",\n          \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorScenarioMappings?$filter=IsSensorActiveForScenario eq Microsoft.Dynamics.DataEntities.NoYes'Yes'\"\n        },\n        \"runAfter\": {},\n        \"type\": \"Http\"\n      },\n      \"IfActiveEquipmentDowntimeScenarioExists\": {\n        \"actions\": {\n          \"CreateFirstEquipmentDowntimeScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('ParseScenarioSensorMappings')?['value']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios/\",\n                \"name\": \"equipmentdowntime.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateFirstSensorJobsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateFirstSensorJobsBlob\": {\n            \"inputs\": {\n              \"body\": \"@body('ParseSensorJobsRefData')?['value']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/sensorjobs\",\n                \"name\": \"@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"GetLatestEquipmentDowntimeScenarioRefData\": [\n                \"Failed\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"GetLatestEquipmentDowntimeScenarioRefData\": {\n            \"inputs\": {\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"get\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n              \"queries\": {\n                \"inferContentType\": true,\n                \"path\": \"sensorintelligencereferencedata/scenarios/equipmentdowntime.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"ParseSensorJobsRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"GetSensorJobs\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorJobs\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"IfEquipmentDowntimeScenarioRefDataChanged\": {\n            \"actions\": {\n              \"CreateSensorJobsBlob\": {\n                \"inputs\": {\n                  \"body\": \"@body('ParseSensorJobsRefData')?['value']\",\n                  \"headers\": {\n                    \"ReadFileMetadataFromServer\": true\n                  },\n                  \"host\": {\n                    \"connection\": {\n                      \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                    }\n                  },\n                  \"method\": \"post\",\n                  \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n                  \"queries\": {\n                    \"folderPath\": \"sensorintelligencereferencedata/sensorjobs\",\n                    \"name\": \"@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                    \"queryParametersSingleEncoded\": true\n                  }\n                },\n                \"runAfter\": {},\n                \"runtimeConfiguration\": {\n                  \"contentTransfer\": {\n                    \"transferMode\": \"Chunked\"\n                  }\n                },\n                \"type\": \"ApiConnection\"\n              },\n              \"UpdateLatestEquipmentDowntimeScenarioRefData\": {\n                \"inputs\": {\n                  \"body\": \"@body('ParseSensorJobsRefData')?['value']\",\n                  \"headers\": {\n                    \"ReadFileMetadataFromServer\": true\n                  },\n                  \"host\": {\n                    \"connection\": {\n                      \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                    }\n                  },\n                  \"method\": \"put\",\n                  \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent('sensorintelligencereferencedata/scenarios/equipmentdowntime.json'))}\"\n                },\n                \"runAfter\": {\n                  \"CreateSensorJobsBlob\": [\n                    \"Succeeded\"\n                  ]\n                },\n                \"type\": \"ApiConnection\"\n              }\n            },\n            \"expression\": {\n              \"and\": [\n                {\n                  \"not\": {\n                    \"equals\": [\n                      \"@string(body('GetLatestEquipmentDowntimeScenarioRefData'))\",\n                      \"@string(body('ParseSensorJobsRefData')?['value'])\"\n                    ]\n                  }\n                }\n              ]\n            },\n            \"runAfter\": {\n              \"GetLatestEquipmentDowntimeScenarioRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"If\"\n          },\n          \"ParseSensorJobsRefData\": {\n            \"inputs\": {\n              \"content\": \"@body('GetSensorJobs')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"IsJobInProgress\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobDataAreaId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobId\": {\n                          \"type\": \"string\"\n                        },\n                        \"MachineNotReportingThreshold\": {\n                          \"type\": \"integer\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"JobId\",\n                        \"JobDataAreaId\",\n                        \"MachineNotReportingThreshold\",\n                        \"IsJobInProgress\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetSensorJobs\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"CreateEmptyEquipmentDowntimeScenarioRefData\": {\n              \"inputs\": {\n                \"body\": \"[]\",\n                \"headers\": {\n                  \"ReadFileMetadataFromServer\": true\n                },\n                \"host\": {\n                  \"connection\": {\n                    \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                  }\n                },\n                \"method\": \"post\",\n                \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n                \"queries\": {\n                  \"folderPath\": \"sensorintelligencereferencedata/scenarios/\",\n                  \"name\": \"equipmentdowntime.json\",\n                  \"queryParametersSingleEncoded\": true\n                }\n              },\n              \"runAfter\": {\n                \"CreateFirstEmptySensorJobsBlob\": [\n                  \"Succeeded\"\n                ]\n              },\n              \"runtimeConfiguration\": {\n                \"contentTransfer\": {\n                  \"transferMode\": \"Chunked\"\n                }\n              },\n              \"type\": \"ApiConnection\"\n            },\n            \"CreateFirstEmptySensorJobsBlob\": {\n              \"inputs\": {\n                \"body\": \"[]\",\n                \"headers\": {\n                  \"ReadFileMetadataFromServer\": true\n                },\n                \"host\": {\n                  \"connection\": {\n                    \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                  }\n                },\n                \"method\": \"post\",\n                \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n                \"queries\": {\n                  \"folderPath\": \"sensorintelligencereferencedata/sensorjobs\",\n                  \"name\": \"@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                  \"queryParametersSingleEncoded\": true\n                }\n              },\n              \"runAfter\": {\n                \"GetLatestEquipmentDowntimeRefData2\": [\n                  \"Failed\"\n                ]\n              },\n              \"runtimeConfiguration\": {\n                \"contentTransfer\": {\n                  \"transferMode\": \"Chunked\"\n                }\n              },\n              \"type\": \"ApiConnection\"\n            },\n            \"GetLatestEquipmentDowntimeRefData2\": {\n              \"inputs\": {\n                \"host\": {\n                  \"connection\": {\n                    \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                  }\n                },\n                \"method\": \"get\",\n                \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n                \"queries\": {\n                  \"inferContentType\": true,\n                  \"path\": \"sensorintelligencereferencedata/scenarios/equipmentdowntime.json\",\n                  \"queryParametersSingleEncoded\": true\n                }\n              },\n              \"runAfter\": {},\n              \"type\": \"ApiConnection\"\n            },\n            \"IfLatestEquipmentDowntimeScenarioRefDataIsNotEmpty\": {\n              \"actions\": {\n                \"CreateEmptySensorJobsBlob\": {\n                  \"inputs\": {\n                    \"body\": \"[]\",\n                    \"headers\": {\n                      \"ReadFileMetadataFromServer\": true\n                    },\n                    \"host\": {\n                      \"connection\": {\n                        \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                      }\n                    },\n                    \"method\": \"post\",\n                    \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n                    \"queries\": {\n                      \"folderPath\": \"sensorintelligencereferencedata/sensorjobs\",\n                      \"name\": \"@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                      \"queryParametersSingleEncoded\": true\n                    }\n                  },\n                  \"runAfter\": {},\n                  \"runtimeConfiguration\": {\n                    \"contentTransfer\": {\n                      \"transferMode\": \"Chunked\"\n                    }\n                  },\n                  \"type\": \"ApiConnection\"\n                },\n                \"UpdateEquipmentDowntimeScenarionRefDataToEmpty\": {\n                  \"inputs\": {\n                    \"body\": \"[]\",\n                    \"headers\": {\n                      \"ReadFileMetadataFromServer\": true\n                    },\n                    \"host\": {\n                      \"connection\": {\n                        \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                      }\n                    },\n                    \"method\": \"put\",\n                    \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent('sensorintelligencereferencedata/scenarios/equipmentdowntime'))}\"\n                  },\n                  \"runAfter\": {\n                    \"CreateEmptySensorJobsBlob\": [\n                      \"Succeeded\"\n                    ]\n                  },\n                  \"type\": \"ApiConnection\"\n                }\n              },\n              \"expression\": {\n                \"and\": [\n                  {\n                    \"not\": {\n                      \"equals\": [\n                        \"@string(body('GetLatestEquipmentDowntimeRefData2'))\",\n                        \"[]\"\n                      ]\n                    }\n                  }\n                ]\n              },\n              \"runAfter\": {\n                \"GetLatestEquipmentDowntimeRefData2\": [\n                  \"Succeeded\"\n                ]\n              },\n              \"type\": \"If\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterEquipmentDowntimeScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterEquipmentDowntimeScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfActiveProductQualityScenarioExists\": {\n        \"actions\": {\n          \"CreateFirstProductQualityScenarioRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('ParseScenarioSensorMappings')?['value']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                \"name\": \"productquality.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"CreateFirstSensorItemBatchAttributeMappingsBlob\": [\n                \"Succeeded\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"CreateFirstSensorItemBatchAttributeMappingsBlob\": {\n            \"inputs\": {\n              \"body\": \"@body('ParseSensorItemBatchAttributeMappingsRefData')?['value']\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/sensorjobbatchattributes\",\n                \"name\": \"@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"GetLatestProductQualityScenarioRefData\": [\n                \"Failed\"\n              ]\n            },\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"GetLatestProductQualityScenarioRefData\": {\n            \"inputs\": {\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"get\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n              \"queries\": {\n                \"inferContentType\": true,\n                \"path\": \"sensorintelligencereferencedata/scenarios/productquality.json\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {\n              \"ParseSensorItemBatchAttributeMappingsRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"GetSensorItemBatchAttributeMappings\": {\n            \"inputs\": {\n              \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n              \"method\": \"GET\",\n              \"uri\": \"@{parameters('EnvironmentUrl')}/data/SensorJobItemBatchAttributes\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Http\"\n          },\n          \"IfProductQualityScenarioRefDataChanged\": {\n            \"actions\": {\n              \"CreateSensorItemBatchAttributeMappingsBlob\": {\n                \"inputs\": {\n                  \"body\": \"@body('ParseSensorItemBatchAttributeMappingsRefData')?['value']\",\n                  \"headers\": {\n                    \"ReadFileMetadataFromServer\": true\n                  },\n                  \"host\": {\n                    \"connection\": {\n                      \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                    }\n                  },\n                  \"method\": \"post\",\n                  \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n                  \"queries\": {\n                    \"folderPath\": \"sensorintelligencereferencedata/sensorjobbatchattributes\",\n                    \"name\": \"@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                    \"queryParametersSingleEncoded\": true\n                  }\n                },\n                \"runAfter\": {},\n                \"runtimeConfiguration\": {\n                  \"contentTransfer\": {\n                    \"transferMode\": \"Chunked\"\n                  }\n                },\n                \"type\": \"ApiConnection\"\n              },\n              \"UpdateProductQualityScenarioRefData\": {\n                \"inputs\": {\n                  \"body\": \"@body('ParseSensorItemBatchAttributeMappingsRefData')?['value']\",\n                  \"headers\": {\n                    \"ReadFileMetadataFromServer\": true\n                  },\n                  \"host\": {\n                    \"connection\": {\n                      \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                    }\n                  },\n                  \"method\": \"put\",\n                  \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent('sensorintelligencereferencedata/scenarios/productquality.json'))}\"\n                },\n                \"runAfter\": {\n                  \"CreateSensorItemBatchAttributeMappingsBlob\": [\n                    \"Succeeded\"\n                  ]\n                },\n                \"type\": \"ApiConnection\"\n              }\n            },\n            \"expression\": {\n              \"and\": [\n                {\n                  \"not\": {\n                    \"equals\": [\n                      \"@string(body('GetLatestProductQualityScenarioRefData'))\",\n                      \"@string(body('ParseSensorItemBatchAttributeMappingsRefData')?['value'])\"\n                    ]\n                  }\n                }\n              ]\n            },\n            \"runAfter\": {\n              \"GetLatestProductQualityScenarioRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"If\"\n          },\n          \"ParseSensorItemBatchAttributeMappingsRefData\": {\n            \"inputs\": {\n              \"content\": \"@body('GetSensorItemBatchAttributeMappings')\",\n              \"schema\": {\n                \"properties\": {\n                  \"value\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"AttributeName\": {\n                          \"type\": \"string\"\n                        },\n                        \"IsJobCompleted\": {\n                          \"type\": \"string\"\n                        },\n                        \"ItemNumber\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobDataAreaId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobId\": {\n                          \"type\": \"string\"\n                        },\n                        \"JobRegistrationStartDateTime\": {\n                          \"format\": \"date\",\n                          \"type\": \"string\"\n                        },\n                        \"JobRegistrationStopDateTime\": {\n                          \"format\": \"date\",\n                          \"type\": \"string\"\n                        },\n                        \"MaximumAttributeTolerance\": {\n                          \"type\": \"number\"\n                        },\n                        \"MinimumAttributeTolerance\": {\n                          \"type\": \"number\"\n                        },\n                        \"OptimalAttributeTolerance\": {\n                          \"type\": \"number\"\n                        },\n                        \"OrderId\": {\n                          \"type\": \"string\"\n                        },\n                        \"SensorId\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"SensorId\",\n                        \"JobId\",\n                        \"JobDataAreaId\",\n                        \"MachineNotReportingThreshold\",\n                        \"IsJobInProgress\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            },\n            \"runAfter\": {\n              \"GetSensorItemBatchAttributeMappings\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ParseJson\"\n          }\n        },\n        \"else\": {\n          \"actions\": {\n            \"CreateFirstEmptyProductQualityScenarioRefData\": {\n              \"inputs\": {\n                \"body\": \"[]\",\n                \"headers\": {\n                  \"ReadFileMetadataFromServer\": true\n                },\n                \"host\": {\n                  \"connection\": {\n                    \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                  }\n                },\n                \"method\": \"post\",\n                \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n                \"queries\": {\n                  \"folderPath\": \"sensorintelligencereferencedata/scenarios\",\n                  \"name\": \"productquality.json\",\n                  \"queryParametersSingleEncoded\": true\n                }\n              },\n              \"runAfter\": {\n                \"CreateNewEmptySensorItemBatchAttributeMappingsBlob\": [\n                  \"Succeeded\"\n                ]\n              },\n              \"runtimeConfiguration\": {\n                \"contentTransfer\": {\n                  \"transferMode\": \"Chunked\"\n                }\n              },\n              \"type\": \"ApiConnection\"\n            },\n            \"CreateNewEmptySensorItemBatchAttributeMappingsBlob\": {\n              \"inputs\": {\n                \"body\": \"[]\",\n                \"headers\": {\n                  \"ReadFileMetadataFromServer\": true\n                },\n                \"host\": {\n                  \"connection\": {\n                    \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                  }\n                },\n                \"method\": \"post\",\n                \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n                \"queries\": {\n                  \"folderPath\": \"sensorintelligencereferencedata/sensorjobbatchattributes\",\n                  \"name\": \"@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                  \"queryParametersSingleEncoded\": true\n                }\n              },\n              \"runAfter\": {\n                \"GetLatestProductQualityScenarioRefData2\": [\n                  \"Failed\"\n                ]\n              },\n              \"runtimeConfiguration\": {\n                \"contentTransfer\": {\n                  \"transferMode\": \"Chunked\"\n                }\n              },\n              \"type\": \"ApiConnection\"\n            },\n            \"GetLatestProductQualityScenarioRefData2\": {\n              \"inputs\": {\n                \"host\": {\n                  \"connection\": {\n                    \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                  }\n                },\n                \"method\": \"get\",\n                \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/GetFileContentByPath\",\n                \"queries\": {\n                  \"inferContentType\": true,\n                  \"path\": \"sensorintelligencereferencedata/scenarios/productquality.json\",\n                  \"queryParametersSingleEncoded\": true\n                }\n              },\n              \"runAfter\": {},\n              \"type\": \"ApiConnection\"\n            },\n            \"IfLatestProductQualityScenarioRefDataIsNotEmpty\": {\n              \"actions\": {\n                \"CreateEmptySensorItemBatchAttributeMappingsBlob\": {\n                  \"inputs\": {\n                    \"body\": \"[]\",\n                    \"headers\": {\n                      \"ReadFileMetadataFromServer\": true\n                    },\n                    \"host\": {\n                      \"connection\": {\n                        \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                      }\n                    },\n                    \"method\": \"post\",\n                    \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n                    \"queries\": {\n                      \"folderPath\": \"sensorintelligencereferencedata/sensorjobbatchattributes\",\n                      \"name\": \"@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                      \"queryParametersSingleEncoded\": true\n                    }\n                  },\n                  \"runAfter\": {},\n                  \"runtimeConfiguration\": {\n                    \"contentTransfer\": {\n                      \"transferMode\": \"Chunked\"\n                    }\n                  },\n                  \"type\": \"ApiConnection\"\n                },\n                \"UpdateLatestProductQualityScenarioRefDataToEmpty\": {\n                  \"inputs\": {\n                    \"body\": \"[]\",\n                    \"headers\": {\n                      \"ReadFileMetadataFromServer\": true\n                    },\n                    \"host\": {\n                      \"connection\": {\n                        \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                      }\n                    },\n                    \"method\": \"put\",\n                    \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent('sensorintelligencereferencedata/scenarios/productquality.json'))}\"\n                  },\n                  \"runAfter\": {\n                    \"CreateEmptySensorItemBatchAttributeMappingsBlob\": [\n                      \"Succeeded\"\n                    ]\n                  },\n                  \"type\": \"ApiConnection\"\n                }\n              },\n              \"expression\": {\n                \"and\": [\n                  {\n                    \"not\": {\n                      \"equals\": [\n                        \"@string(body('GetLatestProductQualityScenarioRefData2'))\",\n                        \"[]\"\n                      ]\n                    }\n                  }\n                ]\n              },\n              \"runAfter\": {\n                \"GetLatestProductQualityScenarioRefData2\": [\n                  \"Succeeded\"\n                ]\n              },\n              \"type\": \"If\"\n            }\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"equals\": [\n                \"@empty(body('FilterProductQualityScenario'))\",\n                \"@false\"\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"FilterProductQualityScenario\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"IfAssetMaintenanceScenarioRefDataChanged\": {\n        \"actions\": {\n          \"CreateAssetMaintenanceRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('FilterAssetMaintenanceScenario')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"post\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files\",\n              \"queries\": {\n                \"folderPath\": \"sensorintelligencereferencedata/assetmaintenancedata\",\n                \"name\": \"@{concat('assetmaintenance', utcNow('yyyy-MM-ddTHH-mm'), '.json')}\",\n                \"queryParametersSingleEncoded\": true\n              }\n            },\n            \"runAfter\": {},\n            \"runtimeConfiguration\": {\n              \"contentTransfer\": {\n                \"transferMode\": \"Chunked\"\n              }\n            },\n            \"type\": \"ApiConnection\"\n          },\n          \"UpdateLatestAssetMaintenanceRefData\": {\n            \"inputs\": {\n              \"body\": \"@body('FilterAssetMaintenanceScenario')\",\n              \"headers\": {\n                \"ReadFileMetadataFromServer\": true\n              },\n              \"host\": {\n                \"connection\": {\n                  \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                }\n              },\n              \"method\": \"put\",\n              \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent('sensorintelligencereferencedata/scenarios/assetmaintenance.json'))}\"\n            },\n            \"runAfter\": {\n              \"CreateAssetMaintenanceRefData\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"ApiConnection\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"not\": {\n                \"equals\": [\n                  \"@variables('latestAssetMaintenanceRefData')\",\n                  \"@variables('newAssetMaintenanceRefData')\"\n                ]\n              }\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"newAssetMaintenanceRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"ParseScenarioSensorMappings\": {\n        \"inputs\": {\n          \"content\": \"@body('GetScenarioSensorMappings')\",\n          \"schema\": {\n            \"properties\": {\n              \"value\": {\n                \"items\": {\n                  \"properties\": {\n                    \"IsSensorActiveForScenario\": {\n                      \"type\": \"string\"\n                    },\n                    \"Scenario\": {\n                      \"type\": \"string\"\n                    },\n                    \"SensorId\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"required\": [\n                    \"SensorId\",\n                    \"Scenario\",\n                    \"IsSensorActiveForScenario\"\n                  ],\n                  \"type\": \"object\"\n                },\n                \"type\": \"array\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"runAfter\": {\n          \"GetScenarioSensorMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ParseJson\"\n      },\n      \"latestAssetMaintenanceRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"latestAssetMaintenanceRefData\",\n              \"type\": \"string\",\n              \"value\": \"@{body('GetLatestAssetMaintenanceScenarioRefData')}\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"GetLatestAssetMaintenanceScenarioRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"newAssetMaintenanceRefData\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"newAssetMaintenanceRefData\",\n              \"type\": \"string\",\n              \"value\": \"@{body('FilterAssetMaintenanceScenario')}\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"latestAssetMaintenanceRefData\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      }\n    },\n    \"contentVersion\": \"1.0.0.0\",\n    \"outputs\": {},\n    \"parameters\": {\n      \"$connections\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      },\n      \"DynamicsIdentityAuthentication\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      },\n      \"EnvironmentUrl\": {\n        \"defaultValue\": \"\",\n        \"type\": \"String\"\n      },\n      \"StorageAccountName\": {\n        \"defaultValue\": \"\",\n        \"type\": \"String\"\n      }\n    },\n    \"triggers\": {\n      \"Recurrence\": {\n        \"evaluatedRecurrence\": {\n          \"frequency\": \"Minute\",\n          \"interval\": 2\n        },\n        \"recurrence\": {\n          \"frequency\": \"Minute\",\n          \"interval\": 2\n        },\n        \"type\": \"Recurrence\"\n      }\n    }\n  },\n  \"parameters\": {}\n}\n",
    "$fxv#4": "{\n  \"definition\": {\n    \"$schema\": \"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#\",\n    \"actions\": {\n      \"CleanupAssetMaintenanceIfMoreThanOneBlob\": {\n        \"actions\": {\n          \"AssetMaintenanceDataCleanupLoop\": {\n            \"actions\": {\n              \"DeleteOldAssetMaintenanceRefData\": {\n                \"inputs\": {\n                  \"headers\": {\n                    \"SkipDeleteIfFileNotFoundOnServer\": false\n                  },\n                  \"host\": {\n                    \"connection\": {\n                      \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                    }\n                  },\n                  \"method\": \"delete\",\n                  \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(items('AssetMaintenanceDataCleanupLoop')?['Path']))}\"\n                },\n                \"runAfter\": {},\n                \"type\": \"ApiConnection\"\n              }\n            },\n            \"foreach\": \"@body('FilterAssetMaintenanceDataOlderThan7Days')\",\n            \"runAfter\": {\n              \"FilterAssetMaintenanceDataOlderThan7Days\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"Foreach\"\n          },\n          \"FilterAssetMaintenanceDataOlderThan7Days\": {\n            \"inputs\": {\n              \"from\": \"@body('ListAllAssetMaintenanceBlobs')?['value']\",\n              \"where\": \"@less(item()?['LastModified'], subtractFromTime(utcNow(), 7, 'Day'))\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Query\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"greater\": [\n                \"@length(body('ListAllAssetMaintenanceBlobs')?['value'])\",\n                1\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"ListAllAssetMaintenanceBlobs\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"CleanupSensorItemBatchAttributeMappingsIfMoreThanOneBlob\": {\n        \"actions\": {\n          \"FilterSensorItemBatchAttributeMappingsOlderThan7Days\": {\n            \"inputs\": {\n              \"from\": \"@body('ListAllSensorJobItembatchAttributeMappings')?['value']\",\n              \"where\": \"@less(item()?['LastModified'], subtractFromTime(utcNow(), 7, 'Day'))\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Query\"\n          },\n          \"SensorJobItemBatchAttributeMappingCleanupLoop\": {\n            \"actions\": {\n              \"DeleteOldSensorItemBatchAttributeMappings\": {\n                \"inputs\": {\n                  \"headers\": {\n                    \"SkipDeleteIfFileNotFoundOnServer\": false\n                  },\n                  \"host\": {\n                    \"connection\": {\n                      \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                    }\n                  },\n                  \"method\": \"delete\",\n                  \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(items('SensorJobItemBatchAttributeMappingCleanupLoop')?['Path']))}\"\n                },\n                \"runAfter\": {},\n                \"type\": \"ApiConnection\"\n              }\n            },\n            \"foreach\": \"@body('FilterSensorItemBatchAttributeMappingsOlderThan7Days')\",\n            \"runAfter\": {\n              \"FilterSensorItemBatchAttributeMappingsOlderThan7Days\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"Foreach\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"greater\": [\n                \"@length(body('ListAllSensorJobItembatchAttributeMappings')?['value'])\",\n                1\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"ListAllSensorJobItembatchAttributeMappings\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"CleanupSensorJobsIfMoreThanOneBlob\": {\n        \"actions\": {\n          \"FilterSensorJobsBlobsOlderThan7Days\": {\n            \"inputs\": {\n              \"from\": \"@body('ListAllSensorJobsBlobs')?['value']\",\n              \"where\": \"@less(item()?['LastModified'], subtractFromTime(utcNow(), 7, 'Day'))\"\n            },\n            \"runAfter\": {},\n            \"type\": \"Query\"\n          },\n          \"SensorJobCleanupLoop\": {\n            \"actions\": {\n              \"DeleteOldSensorJobs\": {\n                \"inputs\": {\n                  \"headers\": {\n                    \"SkipDeleteIfFileNotFoundOnServer\": false\n                  },\n                  \"host\": {\n                    \"connection\": {\n                      \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n                    }\n                  },\n                  \"method\": \"delete\",\n                  \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(items('SensorJobCleanupLoop')?['Path']))}\"\n                },\n                \"runAfter\": {},\n                \"type\": \"ApiConnection\"\n              }\n            },\n            \"foreach\": \"@body('FilterSensorJobsBlobsOlderThan7Days')\",\n            \"runAfter\": {\n              \"FilterSensorJobsBlobsOlderThan7Days\": [\n                \"Succeeded\"\n              ]\n            },\n            \"type\": \"Foreach\"\n          }\n        },\n        \"expression\": {\n          \"and\": [\n            {\n              \"greater\": [\n                \"@length(body('ListAllSensorJobsBlobs')?['value'])\",\n                1\n              ]\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"ListAllSensorJobsBlobs\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"If\"\n      },\n      \"ListAllAssetMaintenanceBlobs\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/foldersV2/@{encodeURIComponent(encodeURIComponent('/sensorintelligencereferencedata/assetmaintenancedata'))}\",\n          \"queries\": {\n            \"nextPageMarker\": \"\",\n            \"useFlatListing\": false\n          }\n        },\n        \"runAfter\": {},\n        \"type\": \"ApiConnection\"\n      },\n      \"ListAllSensorJobItembatchAttributeMappings\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/foldersV2/@{encodeURIComponent(encodeURIComponent('/sensorintelligencereferencedata/sensorjobbatchattributes'))}\",\n          \"queries\": {\n            \"nextPageMarker\": \"\",\n            \"useFlatListing\": false\n          }\n        },\n        \"runAfter\": {},\n        \"type\": \"ApiConnection\"\n      },\n      \"ListAllSensorJobsBlobs\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['azureblob']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('StorageAccountName')))}/foldersV2/@{encodeURIComponent(encodeURIComponent('/sensorintelligencereferencedata/sensorjobs'))}\",\n          \"queries\": {\n            \"nextPageMarker\": \"\",\n            \"useFlatListing\": false\n          }\n        },\n        \"runAfter\": {},\n        \"type\": \"ApiConnection\"\n      }\n    },\n    \"contentVersion\": \"1.0.0.0\",\n    \"outputs\": {},\n    \"parameters\": {\n      \"$connections\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      },\n      \"StorageAccountName\": {\n        \"defaultValue\": \"\",\n        \"type\": \"String\"\n      }\n    },\n    \"triggers\": {\n      \"Recurrence\": {\n        \"evaluatedRecurrence\": {\n          \"frequency\": \"Day\",\n          \"interval\": 7\n        },\n        \"recurrence\": {\n          \"frequency\": \"Day\",\n          \"interval\": 7\n        },\n        \"type\": \"Recurrence\"\n      }\n    }\n  },\n  \"parameters\": {}\n}\n",
    "$fxv#5": "{\n  \"definition\": {\n    \"$schema\": \"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#\",\n    \"actions\": {\n      \"Complete_Insight_message_in_queue\": {\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['servicebus']['connectionId']\"\n            }\n          },\n          \"method\": \"delete\",\n          \"path\": \"/@{encodeURIComponent(encodeURIComponent('outbound-insights'))}/messages/complete\",\n          \"queries\": {\n            \"lockToken\": \"@triggerBody()?['LockToken']\",\n            \"queueType\": \"Main\",\n            \"sessionId\": \"\"\n          }\n        },\n        \"runAfter\": {\n          \"Post_Notification\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"ApiConnection\"\n      },\n      \"Compose_Notification_object\": {\n        \"inputs\": {\n          \"Id\": \"@{variables('NotificationGUID')}\",\n          \"NotificationRaisedDateTime\": \"@{body('Parse_Insight')?['timestamp']}\",\n          \"Payload\": \"@decodeBase64(triggerBody()?['ContentData'])\",\n          \"Type\": \"@{body('Parse_Insight')?['notificationType']}\"\n        },\n        \"runAfter\": {\n          \"Notification_GUID\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Compose\"\n      },\n      \"Notification_GUID\": {\n        \"inputs\": {\n          \"variables\": [\n            {\n              \"name\": \"NotificationGUID\",\n              \"type\": \"string\",\n              \"value\": \"@triggerBody()?['LockToken']\"\n            }\n          ]\n        },\n        \"runAfter\": {\n          \"Parse_Insight\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"InitializeVariable\"\n      },\n      \"Parse_Insight\": {\n        \"inputs\": {\n          \"content\": \"@decodeBase64(triggerBody()?['ContentData'])\",\n          \"schema\": {\n            \"properties\": {\n              \"notificationType\": {\n                \"type\": \"string\"\n              },\n              \"timestamp\": {\n                \"type\": \"string\"\n              }\n            },\n            \"type\": \"object\"\n          }\n        },\n        \"runAfter\": {},\n        \"type\": \"ParseJson\"\n      },\n      \"Post_Notification\": {\n        \"inputs\": {\n          \"authentication\": \"@parameters('DynamicsIdentityAuthentication')\",\n          \"body\": \"@outputs('Compose_Notification_object')\",\n          \"headers\": {\n            \"Content-Type\": \"application/json\"\n          },\n          \"method\": \"POST\",\n          \"uri\": \"@{parameters('EnvironmentUrl')}/data/OperationsNotifications\"\n        },\n        \"runAfter\": {\n          \"Compose_Notification_object\": [\n            \"Succeeded\"\n          ]\n        },\n        \"type\": \"Http\"\n      }\n    },\n    \"contentVersion\": \"1.0.0.0\",\n    \"parameters\": {\n      \"$connections\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      },\n      \"DynamicsIdentityAuthentication\": {\n        \"defaultValue\": {},\n        \"type\": \"Object\"\n      },\n      \"EnvironmentUrl\": {\n        \"defaultValue\": \"\",\n        \"type\": \"String\"\n      }\n    },\n    \"triggers\": {\n      \"When_Insight_is_added_to_outbound_queue_(peek-lock)\": {\n        \"evaluatedRecurrence\": {\n          \"frequency\": \"Second\",\n          \"interval\": 30\n        },\n        \"inputs\": {\n          \"host\": {\n            \"connection\": {\n              \"name\": \"@parameters('$connections')['servicebus']['connectionId']\"\n            }\n          },\n          \"method\": \"get\",\n          \"path\": \"/@{encodeURIComponent(encodeURIComponent('outbound-insights'))}/messages/head/peek\",\n          \"queries\": {\n            \"queryType\": \"Main\"\n          }\n        },\n        \"recurrence\": {\n          \"frequency\": \"Second\",\n          \"interval\": 30\n        },\n        \"type\": \"ApiConnection\"\n      }\n    }\n  },\n  \"parameters\": {}\n}\n",
    "resourcesLocation": "[resourceGroup().location]",
    "uniqueIdentifier": "[uniqueString(resourceGroup().id)]",
    "createNewIotHub": "[empty(parameters('existingIotHubName'))]",
    "azureServiceBusDataReceiverRoleId": "4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
    "azureStorageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
    "trimmedEnvironmentUrl": "[trim(parameters('supplyChainManagementEnvironmentURL'))]",
    "streamScenarioJobs": [
      {
        "scenario": "machine-reporting-status",
        "referenceDataName": "SensorJobsReferenceInput",
        "referencePathPattern": "sensorjobs/sensorjobs{date}T{time}.json",
        "query": "[variables('$fxv#0')]"
      },
      {
        "scenario": "asset-maintenance",
        "referenceDataName": "ScenarioMappings",
        "referencePathPattern": "assetmaintenancedata/assetmaintenance{date}T{time}.json",
        "query": "[variables('$fxv#1')]"
      },
      {
        "scenario": "product-quality-validation",
        "referenceDataName": "SensorJobItemBatchAttributeReferenceInput",
        "referencePathPattern": "sensorjobbatchattributes/sensorjobitembatchattributemappings{date}T{time}.json",
        "query": "[variables('$fxv#2')]"
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}/{2}', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default', 'sensorintelligencereferencedata')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues/authorizationRules",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}/{2}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule')]",
      "properties": {
        "rights": [
          "Send"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]"
      ]
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
      "properties": {
        "enablePartitioning": false,
        "enableBatchedOperations": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/sourcecontrols",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}/{1}', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')), 'web')]",
      "kind": "gitHubHostedTemplate",
      "properties": {
        "repoUrl": "https://github.com/AndreasHassing/AzureStreamAnalyticsToRedisFunction",
        "branch": "main",
        "isManualIntegration": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', 'appDeploymentWait')]",
        "[resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Cache/redis",
      "apiVersion": "2021-06-01",
      "name": "[format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {
        "redisVersion": "4.1.14",
        "sku": {
          "name": "Basic",
          "family": "C",
          "capacity": 0
        }
      }
    },
    {
      "condition": "[variables('createNewIotHub')]",
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2021-07-02",
      "name": "[format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "B1",
        "capacity": 1
      },
      "properties": {}
    },
    {
      "copy": {
        "name": "iotHubConsumerGroups",
        "count": "[length(variables('streamScenarioJobs'))]"
      },
      "type": "Microsoft.Devices/IotHubs/eventHubEndpoints/ConsumerGroups",
      "apiVersion": "2021-07-02",
      "name": "[format('{0}/events/{1}', if(variables('createNewIotHub'), format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier')), parameters('existingIotHubName')), variables('streamScenarioJobs')[copyIndex()].scenario)]",
      "properties": {
        "name": "[variables('streamScenarioJobs')[copyIndex()].scenario]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-03-01",
      "name": "[format('msdyn-iiot-sdi-appsvcplan-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "F1",
        "capacity": 0
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('msdyn-iiot-sdi-appsvcplan-{0}', variables('uniqueIdentifier')))]",
        "httpsOnly": true,
        "siteConfig": {
          "minTlsVersion": "1.2",
          "ftpsState": "Disabled",
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', format('msdyniiotst{0}', variables('uniqueIdentifier')), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "RedisConnectionString",
              "value": "[format('{0}:{1},password={2},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier')))).hostName, reference(resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier')))).sslPort, listKeys(resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier'))), '2021-06-01').primaryKey)]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('msdyn-iiot-sdi-appsvcplan-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "appDeploymentWait",
      "location": "[variables('resourcesLocation')]",
      "kind": "AzurePowerShell",
      "properties": {
        "retentionInterval": "PT1H",
        "azPowerShellVersion": "7.3.2",
        "scriptContent": "Start-Sleep -Seconds 30"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "copy": {
        "name": "streamAnalyticsJobs",
        "count": "[length(variables('streamScenarioJobs'))]"
      },
      "type": "Microsoft.StreamAnalytics/streamingjobs",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[copyIndex()].scenario, variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "sku": {
          "name": "Standard"
        },
        "compatibilityLevel": "1.2",
        "outputStartMode": "JobStartTime",
        "inputs": [
          {
            "name": "IotInput",
            "properties": {
              "type": "Stream",
              "datasource": {
                "type": "Microsoft.Devices/IotHubs",
                "properties": {
                  "iotHubNamespace": "[if(variables('createNewIotHub'), format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier')), parameters('existingIotHubName'))]",
                  "sharedAccessPolicyName": "[if(variables('createNewIotHub'), listkeys(resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier'))), '2021-07-02').value[1].keyName, listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingIotHubResourceGroupName')), 'Microsoft.Devices/IotHubs', parameters('existingIotHubName')), '2021-07-02').value[1].keyName)]",
                  "sharedAccessPolicyKey": "[if(variables('createNewIotHub'), listkeys(resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier'))), '2021-07-02').value[1].primaryKey, listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingIotHubResourceGroupName')), 'Microsoft.Devices/IotHubs', parameters('existingIotHubName')), '2021-07-02').value[1].primaryKey)]",
                  "endpoint": "messages/events",
                  "consumerGroupName": "[variables('streamScenarioJobs')[copyIndex()].scenario]"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8"
                }
              }
            }
          },
          {
            "name": "[variables('streamScenarioJobs')[copyIndex()].referenceDataName]",
            "properties": {
              "type": "Reference",
              "datasource": {
                "type": "Microsoft.Storage/Blob",
                "properties": {
                  "authenticationMode": "Msi",
                  "storageAccounts": [
                    {
                      "accountName": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]"
                    }
                  ],
                  "container": "sensorintelligencereferencedata",
                  "pathPattern": "[variables('streamScenarioJobs')[copyIndex()].referencePathPattern]",
                  "dateFormat": "yyyy-MM-dd",
                  "timeFormat": "HH-mm"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8"
                }
              }
            }
          }
        ],
        "outputs": [
          {
            "name": "MetricOutput",
            "properties": {
              "datasource": {
                "type": "Microsoft.AzureFunction",
                "properties": {
                  "functionAppName": "[format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier'))]",
                  "functionName": "AzureStreamAnalyticsToRedis",
                  "apiKey": "[listKeys(format('{0}/host/default', resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))), '2021-02-01').functionKeys.default]"
                }
              }
            }
          },
          {
            "name": "NotificationOutput",
            "properties": {
              "datasource": {
                "type": "Microsoft.ServiceBus/Queue",
                "properties": {
                  "serviceBusNamespace": "[format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier'))]",
                  "queueName": "outbound-insights",
                  "authenticationMode": "ConnectionString",
                  "sharedAccessPolicyName": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule'), '2021-06-01-preview').keyName]",
                  "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule'), '2021-06-01-preview').primaryKey]"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8",
                  "format": "Array"
                }
              }
            }
          }
        ],
        "transformation": {
          "name": "input2output",
          "properties": {
            "query": "[variables('streamScenarioJobs')[copyIndex()].query]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule')]",
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Web/sites/sourcecontrols', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')), 'web')]",
        "[resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default', 'sensorintelligencereferencedata')]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))), variables('azureServiceBusDataReceiverRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureServiceBusDataReceiverRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))).principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} read from Service Bus queues.', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))), variables('azureStorageBlobDataContributorRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureStorageBlobDataContributorRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))).principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} insert blobs into the reference data Storage Account.', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "copy": {
        "name": "streamAnalyticsBlobDataContributorRoleAssignment",
        "count": "[length(range(0, length(variables('streamScenarioJobs'))))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier'))), variables('azureStorageBlobDataContributorRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureStorageBlobDataContributorRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier'))), '2021-10-01-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} read from the reference data Storage Account. Stream Analytics needs Contributor role to function, even if it only reads.', format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {
        "displayName": "[format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier'))]",
        "parameterValueSet": {
          "name": "managedIdentityAuth",
          "values": {
            "namespaceEndpoint": {
              "value": "[replace(replace(reference(resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))).serviceBusEndpoint, 'https://', 'sb://'), ':443', '')]"
            }
          }
        },
        "api": {
          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'servicebus')]",
          "type": "Microsoft.Web/locations/managedApis"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {
        "displayName": "[format('msdyn-iiot-sdi-storageaccountbusconnection-{0}', variables('uniqueIdentifier'))]",
        "parameterValueSet": {
          "name": "managedIdentityAuth",
          "values": {}
        },
        "api": {
          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'azureblob')]",
          "type": "Microsoft.Web/locations/managedApis"
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[format('msdyn-iiot-sdi-logicapp-refdata-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))))]": {}
        }
      },
      "properties": {
        "definition": "[json(variables('$fxv#3')).definition]",
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'azureblob')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier')))]",
                "connectionName": "azureblob",
                "connectionProperties": {
                  "authentication": {
                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          },
          "DynamicsIdentityAuthentication": {
            "value": {
              "audience": "00000015-0000-0000-c000-000000000000",
              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
              "type": "ManagedServiceIdentity"
            }
          },
          "EnvironmentUrl": {
            "value": "[variables('trimmedEnvironmentUrl')]"
          },
          "StorageAccountName": {
            "value": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]"
          }
        },
        "accessControl": {
          "contents": {
            "allowedCallerIpAddresses": [
              {
                "addressRange": "0.0.0.0-0.0.0.0"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[format('msdyn-iiot-sdi-logicapp-refdatacleanup-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))))]": {}
        }
      },
      "properties": {
        "definition": "[json(variables('$fxv#4')).definition]",
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'azureblob')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier')))]",
                "connectionName": "azureblob",
                "connectionProperties": {
                  "authentication": {
                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          },
          "StorageAccountName": {
            "value": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]"
          }
        },
        "accessControl": {
          "contents": {
            "allowedCallerIpAddresses": [
              {
                "addressRange": "0.0.0.0-0.0.0.0"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[format('msdyn-iiot-sdi-logicapp-notification-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))))]": {}
        }
      },
      "properties": {
        "definition": "[json(variables('$fxv#5')).definition]",
        "parameters": {
          "$connections": {
            "value": {
              "servicebus": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier')))]",
                "connectionName": "servicebus",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity",
                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
                  }
                }
              }
            }
          },
          "DynamicsIdentityAuthentication": {
            "value": {
              "audience": "00000015-0000-0000-c000-000000000000",
              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
              "type": "ManagedServiceIdentity"
            }
          },
          "EnvironmentUrl": {
            "value": "[variables('trimmedEnvironmentUrl')]"
          }
        },
        "accessControl": {
          "contents": {
            "allowedCallerIpAddresses": [
              {
                "addressRange": "0.0.0.0-0.0.0.0"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      ]
    }
  ],
  "outputs": {
    "applicationId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))).clientId]",
      "metadata": {
        "description": "AAD Application ID to allowlist in Dynamics"
      }
    }
  }
}