{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.1.6515",
      "templateHash": "9035388083406283620"
    }
  },
  "parameters": {
    "environmentUrl": {
      "type": "string",
      "defaultValue": "",
      "minLength": 1,
      "metadata": {
        "description": "URL of the Dynamics 365 environment (example: https://contoso.operations.dynamics.com/)"
      }
    },
    "existingIotHubResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group name of the IoT Hub to reuse. Leave empty to create a new IoT Hub."
      }
    },
    "existingIotHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource name of the IoT Hub to reuse. Leave empty to create a new IoT Hub."
      }
    }
  },
  "variables": {
    "$fxv#0": "CREATE TABLE IotInput(\n  eventEnqueuedUtcTime datetime,\n  sensorId nvarchar(max)\n);\n\nCREATE TABLE SensorJobsReferenceInput(\n  sensorId nvarchar(max),\n  jobId nvarchar(max),\n  isJobInProgress nvarchar(max),\n  jobDataAreaId nvarchar(max),\n  machineNotReportingThreshold bigint\n);\n\n/* Query for machine reporting status scenario (equipment downtime) */\nWITH FakeHeartBeat AS /* Generate an event for every time window  */\n(\n  SELECT COUNT(*)\n  FROM IotInput\n  TIMESTAMP BY eventEnqueuedUtcTime\n  GROUP BY HoppingWindow(Duration(hour, 1), Hop(minute, 1))\n),\nAllSensors AS /* generate one event per sensor per period */\n(\n  SELECT\n    SensorJobsReferenceInput.SensorId AS machineId,\n    SensorJobsReferenceInput.IsJobInProgress AS isJobInProgress,\n    SensorJobsReferenceInput.JobId AS jobId,\n    SensorJobsReferenceInput.JobDataAreaId AS dataAreaId,\n    SensorJobsReferenceInput.MachineNotReportingThreshold AS thresholdMins,\n    System.Timestamp() AS timestamp\n  FROM FakeHeartBeat\n  JOIN SensorJobsReferenceInput ON 1 = 1 /* Cross Join */\n),\nActiveSensors AS /* compute how many events have been received in the time window from each device */\n(\n  SELECT\n    sensorId AS machineId,\n    COUNT(*) AS eventCount,\n    System.Timestamp() AS timestamp\n  FROM IotInput\n  TIMESTAMP BY eventEnqueuedUtcTime\n  GROUP BY sensorId, TumblingWindow(minute, 1)\n),\nAllSensorEventCounts AS /* Find event count for every device, also those with zero events if they should be in progress */\n(\n  SELECT\n    AllSensors.*,\n    CASE WHEN ActiveSensors.eventCount IS NULL THEN 0\n      ELSE ActiveSensors.eventCount\n    END AS eventCount\n  FROM AllSensors LEFT JOIN ActiveSensors\n  ON\n    ActiveSensors.machineId = AllSensors.machineId\n    AND DATEDIFF(ms, ActiveSensors, AllSensors) = 0\n  WHERE\n    ActiveSensors.eventCount IS NOT NULL\n    OR AllSensors.isJobInProgress = 'Yes'\n),\nSensorEventCountsWithinTwoThresholds AS /* Filter out all events earlier than two thresholds ago */\n(\n  SELECT *\n  FROM AllSensorEventCounts\n  WHERE DATEDIFF(minute, timestamp, System.Timestamp) < 2*thresholdMins\n),\nLastSensorEvents AS /* Find the number of minutes since each device last recieved events */\n(\n  SELECT\n    *,\n    COALESCE(\n      DATEDIFF(\n        minute,\n        LAG(timestamp) OVER (PARTITION BY machineId LIMIT DURATION(hour, 12) WHEN eventCount > 0), /* Maximum lookback is 12 hours, data only goes two thresholds back */\n        timestamp\n      ),\n      2*thresholdmins\n    ) AS minutesSinceLastEvent\n  FROM SensorEventCountsWithinTwoThresholds\n),\nStartedAndStoppedSensors AS /* Find devices that stopped sending or started sending */\n(\n  (SELECT\n    *,\n    'TRUE' AS isMachineRunning\n  FROM LastSensorEvents\n  WHERE\n  (minutesSinceLastEvent >= thresholdMins AND eventCount > 0))\n  UNION\n  (SELECT\n    *,\n    'FALSE' AS isMachineRunning\n  FROM LastSensorEvents\n  WHERE\n    (minutesSinceLastEvent = thresholdMins AND eventCount = 0)\n  )\n)\n\nSELECT\n  machineId,\n  jobId,\n  dataAreaId,\n  isMachineRunning,\n  timestamp,\n  'MachineReportingStatus' AS notificationType\nINTO NotificationOutput\nFROM StartedAndStoppedSensors\n\nSELECT\n  CONCAT('MachineReportingStatus:', machineId) AS metricKey,\n  timestamp,\n  CAST(EventCount AS FLOAT) AS value\nINTO MetricOutput\nFROM AllSensorEventCounts\n",
    "$fxv#1": "CREATE TABLE IotInput(\n  eventEnqueuedUtcTime datetime,\n  sensorId nvarchar(max),\n  value float\n);\n\nCREATE TABLE ScenarioMappings(\n  sensorId nvarchar(max),\n  scenario nvarchar(max),\n  isSensorActiveForScenario nvarchar(max)\n);\n\nSELECT\n  I.sensorId,\n  System.Timestamp AS timestamp,\n  SUM(I.value) AS counterValue,\n  'AssetMaintenance' AS notificationType\nINTO NotificationOutput\nFROM IotInput I TIMESTAMP BY I.eventEnqueuedUtcTime\nJOIN ScenarioMappings SM ON SM.sensorId = I.sensorId\nWHERE\n  SM.scenario = 'AssetMaintenance'\n  AND SM.isSensorActiveForScenario = 'Yes'\nGROUP BY I.sensorId, TumblingWindow(hour, 3)\n",
    "resourcesLocation": "[resourceGroup().location]",
    "uniqueIdentifier": "[uniqueString(resourceGroup().id)]",
    "createNewIotHub": "[empty(parameters('existingIotHubName'))]",
    "azureServiceBusDataReceiverRoleId": "4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
    "azureStorageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
    "trimmedEnvironmentUrl": "[trim(parameters('environmentUrl'))]",
    "streamScenarioJobs": [
      {
        "scenario": "machine-reporting-status",
        "referenceDataName": "SensorJobsReferenceInput",
        "referencePathPattern": "sensorjobs/sensorjobs{date}T{time}.json",
        "query": "[variables('$fxv#0')]"
      },
      {
        "scenario": "asset-maintenance",
        "referenceDataName": "ScenarioMappings",
        "referencePathPattern": "assetmaintenancedata/assetmaintanence{date}T{time}.json",
        "query": "[variables('$fxv#1')]"
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}/{2}', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default', 'iotoutputstoragev2')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}/{2}', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default', 'sensorintelligencereferencedata')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues/authorizationRules",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}/{2}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule')]",
      "properties": {
        "rights": [
          "Send"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]"
      ]
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
      "properties": {
        "enablePartitioning": false,
        "enableBatchedOperations": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/sourcecontrols",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}/{1}', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')), 'web')]",
      "kind": "gitHubHostedTemplate",
      "properties": {
        "repoUrl": "https://github.com/AndreasHassing/AzureStreamAnalyticsToRedisFunction",
        "branch": "main",
        "isManualIntegration": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', 'appDeploymentWait')]",
        "[resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Cache/redis",
      "apiVersion": "2021-06-01",
      "name": "[format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {
        "redisVersion": "4.1.14",
        "sku": {
          "name": "Basic",
          "family": "C",
          "capacity": 0
        }
      }
    },
    {
      "condition": "[variables('createNewIotHub')]",
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2021-07-02",
      "name": "[format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "B1",
        "capacity": 1
      },
      "properties": {}
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-03-01",
      "name": "[format('msdyn-iiot-sdi-appsvcplan-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "sku": {
        "name": "F1",
        "capacity": 0
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('msdyn-iiot-sdi-appsvcplan-{0}', variables('uniqueIdentifier')))]",
        "httpsOnly": true,
        "siteConfig": {
          "minTlsVersion": "1.2",
          "ftpsState": "Disabled",
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', format('msdyniiotst{0}', variables('uniqueIdentifier')), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "RedisConnectionString",
              "value": "[format('{0}:{1},password={2},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier')))).hostName, reference(resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier')))).sslPort, listKeys(resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier'))), '2021-06-01').primaryKey)]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('msdyn-iiot-sdi-appsvcplan-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Cache/redis', format('msdyn-iiot-sdi-redis-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "appDeploymentWait",
      "location": "[variables('resourcesLocation')]",
      "kind": "AzurePowerShell",
      "properties": {
        "retentionInterval": "PT1H",
        "azPowerShellVersion": "7.3.2",
        "scriptContent": "Start-Sleep -Seconds 30"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "copy": {
        "name": "streamAnalyticsJobs",
        "count": "[length(variables('streamScenarioJobs'))]"
      },
      "type": "Microsoft.StreamAnalytics/streamingjobs",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[copyIndex()].scenario, variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "sku": {
          "name": "Standard"
        },
        "compatibilityLevel": "1.2",
        "outputStartMode": "JobStartTime",
        "inputs": [
          {
            "name": "IotInput",
            "properties": {
              "type": "Stream",
              "datasource": {
                "type": "Microsoft.Devices/IotHubs",
                "properties": {
                  "iotHubNamespace": "[if(variables('createNewIotHub'), format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier')), parameters('existingIotHubName'))]",
                  "sharedAccessPolicyName": "[if(variables('createNewIotHub'), listkeys(resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier'))), '2021-07-02').value[1].keyName, listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingIotHubResourceGroupName')), 'Microsoft.Devices/IotHubs', parameters('existingIotHubName')), '2021-07-02').value[1].keyName)]",
                  "sharedAccessPolicyKey": "[if(variables('createNewIotHub'), listkeys(resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier'))), '2021-07-02').value[1].primaryKey, listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('existingIotHubResourceGroupName')), 'Microsoft.Devices/IotHubs', parameters('existingIotHubName')), '2021-07-02').value[1].primaryKey)]",
                  "endpoint": "messages/events",
                  "consumerGroupName": "$Default"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8"
                }
              }
            }
          },
          {
            "name": "[variables('streamScenarioJobs')[copyIndex()].referenceDataName]",
            "properties": {
              "type": "Reference",
              "datasource": {
                "type": "Microsoft.Storage/Blob",
                "properties": {
                  "authenticationMode": "Msi",
                  "storageAccounts": [
                    {
                      "accountName": "[format('msdyniiotst{0}', variables('uniqueIdentifier'))]"
                    }
                  ],
                  "container": "sensorintelligencereferencedata",
                  "pathPattern": "[variables('streamScenarioJobs')[copyIndex()].referencePathPattern]",
                  "dateFormat": "yyyy-MM-dd",
                  "timeFormat": "HH-mm"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8"
                }
              }
            }
          }
        ],
        "outputs": [
          {
            "name": "MetricOutput",
            "properties": {
              "datasource": {
                "type": "Microsoft.AzureFunction",
                "properties": {
                  "functionAppName": "[format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier'))]",
                  "functionName": "AzureStreamAnalyticsToRedis",
                  "apiKey": "[listKeys(format('{0}/host/default', resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))), '2021-02-01').functionKeys.default]"
                }
              }
            }
          },
          {
            "name": "NotificationOutput",
            "properties": {
              "datasource": {
                "type": "Microsoft.ServiceBus/Queue",
                "properties": {
                  "serviceBusNamespace": "[format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier'))]",
                  "queueName": "outbound-insights",
                  "authenticationMode": "ConnectionString",
                  "sharedAccessPolicyName": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule'), '2021-06-01-preview').keyName]",
                  "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule'), '2021-06-01-preview').primaryKey]"
                }
              },
              "serialization": {
                "type": "Json",
                "properties": {
                  "encoding": "UTF8",
                  "format": "Array"
                }
              }
            }
          }
        ],
        "transformation": {
          "name": "input2output",
          "properties": {
            "query": "[variables('streamScenarioJobs')[copyIndex()].query]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights', 'AsaSendRule')]",
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Web/sites', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Web/sites/sourcecontrols', format('msdyn-iiot-sdi-functionapp-{0}', variables('uniqueIdentifier')), 'web')]",
        "[resourceId('Microsoft.Devices/IotHubs', format('msdyn-iiot-sdi-iothub-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default', 'sensorintelligencereferencedata')]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))), variables('azureServiceBusDataReceiverRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureServiceBusDataReceiverRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))).principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} read from Service Bus queues.', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))), variables('azureStorageBlobDataContributorRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureStorageBlobDataContributorRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))).principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} insert blobs into the reference data Storage Account.', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "copy": {
        "name": "streamAnalyticsBlobDataContributorRoleAssignment",
        "count": "[length(range(0, length(variables('streamScenarioJobs'))))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier'))), resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier'))), variables('azureStorageBlobDataContributorRoleId'))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('azureStorageBlobDataContributorRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier'))), '2021-10-01-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "description": "[format('For letting {0} read from the reference data Storage Account. Stream Analytics needs Contributor role to function, even if it only reads.', format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', format('msdyn-iiot-sdi-{0}-{1}', variables('streamScenarioJobs')[range(0, length(variables('streamScenarioJobs')))[copyIndex()]].scenario, variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {
        "displayName": "[format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier'))]",
        "parameterValueSet": {
          "name": "managedIdentityAuth",
          "values": {
            "namespaceEndpoint": {
              "value": "[replace(replace(reference(resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))).serviceBusEndpoint, 'https://', 'sb://'), ':443', '')]"
            }
          }
        },
        "api": {
          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'servicebus')]",
          "type": "Microsoft.Web/locations/managedApis"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "properties": {
        "displayName": "[format('msdyn-iiot-sdi-storageaccountbusconnection-{0}', variables('uniqueIdentifier'))]",
        "parameterValueSet": {
          "name": "managedIdentityAuth",
          "values": {}
        },
        "api": {
          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'azureblob')]",
          "type": "Microsoft.Web/locations/managedApis"
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[format('msdyn-iiot-sdi-logicapp-refdata-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))))]": {}
        }
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 3
              },
              "evaluatedRecurrence": {
                "frequency": "Minute",
                "interval": 3
              },
              "type": "Recurrence"
            }
          },
          "actions": {
            "AssetMaintenanceMappingsRefDataQuery": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "AssetMaintenanceMappingsRefDataQuery",
                    "type": "string",
                    "value": "$filter=IsSensorActiveForScenario eq Microsoft.Dynamics.DataEntities.NoYes'Yes' and Scenario eq Microsoft.Dynamics.DataEntities.IoTIntCoreScenarioType'AssetMaintenance'"
                  }
                ]
              }
            },
            "CleanupAssetMaintenanceIfMoreThanOneBlob": {
              "actions": {
                "AssetMaintenanceDataCleanupLoop": {
                  "foreach": "@body('FilterAssetMaintanenceDataOlderThan7Days')",
                  "actions": {
                    "Delete_blob_(V2)_2": {
                      "runAfter": {},
                      "type": "ApiConnection",
                      "inputs": {
                        "headers": {
                          "SkipDeleteIfFileNotFoundOnServer": false
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "delete",
                        "path": "[format('/v2/datasets/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/files/@{{encodeURIComponent(encodeURIComponent(items(''AssetMaintenanceDataCleanupLoop'')?[''Path'']))}}', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
                      }
                    }
                  },
                  "runAfter": {
                    "FilterAssetMaintanenceDataOlderThan7Days": [
                      "Succeeded"
                    ]
                  },
                  "type": "Foreach"
                },
                "FilterAssetMaintanenceDataOlderThan7Days": {
                  "runAfter": {},
                  "type": "Query",
                  "inputs": {
                    "from": "@body('ListAllAssetMaintenanceBlobs')?['value']",
                    "where": "@less(item()?['LastModified'], subtractFromTime(utcNow(), 7, 'Day'))"
                  }
                }
              },
              "runAfter": {
                "ListAllAssetMaintenanceBlobs": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "greater": [
                      "@length(body('ListAllAssetMaintenanceBlobs')?['value'])",
                      1
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "CleanupSensorItemBatchAttributeMappingsIfMoreThanOneBlob": {
              "actions": {
                "FilterSensorItemBatchAttributeMappingsOlderThan7Days": {
                  "runAfter": {},
                  "type": "Query",
                  "inputs": {
                    "from": "@body('ListAllSensorJobItembatchAttributeMappings')?['value']",
                    "where": "@less(item()?['LastModified'], subtractFromTime(utcNow(), 7, 'Day'))"
                  }
                },
                "SensorJobItemBatchAttributeMappingCleanupLoop": {
                  "foreach": "@body('FilterSensorItemBatchAttributeMappingsOlderThan7Days')",
                  "actions": {
                    "Delete_blob_(V2)": {
                      "runAfter": {},
                      "type": "ApiConnection",
                      "inputs": {
                        "headers": {
                          "SkipDeleteIfFileNotFoundOnServer": false
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "delete",
                        "path": "[format('/v2/datasets/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/files/@{{encodeURIComponent(encodeURIComponent(items(''SensorJobItemBatchAttributeMappingCleanupLoop'')?[''Path'']))}}', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
                      }
                    }
                  },
                  "runAfter": {
                    "FilterSensorItemBatchAttributeMappingsOlderThan7Days": [
                      "Succeeded"
                    ]
                  },
                  "type": "Foreach"
                }
              },
              "runAfter": {
                "ListAllSensorJobItembatchAttributeMappings": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "greater": [
                      "@length(body('ListAllSensorJobItembatchAttributeMappings')?['value'])",
                      1
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "CleanupSensorJobsIfMoreThanOneBlob": {
              "actions": {
                "FilterSensorJobsBlobsOlderThan7Days": {
                  "runAfter": {},
                  "type": "Query",
                  "inputs": {
                    "from": "@body('ListAllSensorJobsBlobs')?['value']",
                    "where": "@less(item()?['LastModified'], subtractFromTime(utcNow(), 7, 'Day'))"
                  }
                },
                "SensorJobCleanupLoop": {
                  "foreach": "@body('FilterSensorJobsBlobsOlderThan7Days')",
                  "actions": {
                    "DeleteOldSensorJobsBlob": {
                      "runAfter": {},
                      "type": "ApiConnection",
                      "inputs": {
                        "headers": {
                          "SkipDeleteIfFileNotFoundOnServer": false
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "delete",
                        "path": "[format('/v2/datasets/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/files/@{{encodeURIComponent(encodeURIComponent(items(''SensorJobCleanupLoop'')?[''Path'']))}}', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
                      }
                    }
                  },
                  "runAfter": {
                    "FilterSensorJobsBlobsOlderThan7Days": [
                      "Succeeded"
                    ]
                  },
                  "type": "Foreach"
                }
              },
              "runAfter": {
                "ListAllSensorJobsBlobs": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "greater": [
                      "@length(body('ListAllSensorJobsBlobs')?['value'])",
                      1
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "CreateAssetMaintenanceMappingsBlob": {
              "runAfter": {
                "ParseAssetMaintenanceRefData": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@body('ParseAssetMaintenanceRefData')?['value']",
                "headers": {
                  "ReadFileMetadataFromServer": true
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "post",
                "path": "[format('/v2/datasets/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/files', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
                "queries": {
                  "folderPath": "[format('{0}/assetmaintenancedata', 'sensorintelligencereferencedata')]",
                  "name": "@{concat('assetmaintanence', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                  "queryParametersSingleEncoded": true
                }
              },
              "runtimeConfiguration": {
                "contentTransfer": {
                  "transferMode": "Chunked"
                }
              }
            },
            "CreateSensorItemBatchAttributeMappingsBlob": {
              "runAfter": {
                "ParseSensorItemBatchAttributeMappingsRefData": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@body('ParseSensorItemBatchAttributeMappingsRefData')?['value']",
                "headers": {
                  "ReadFileMetadataFromServer": true
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "post",
                "path": "[format('/v2/datasets/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/files', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
                "queries": {
                  "folderPath": "[format('{0}/sensorjobbatchattributes', 'sensorintelligencereferencedata')]",
                  "name": "@{concat('sensorjobitembatchattributemappings', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                  "queryParametersSingleEncoded": true
                }
              },
              "runtimeConfiguration": {
                "contentTransfer": {
                  "transferMode": "Chunked"
                }
              }
            },
            "CreateSensorJobsBlob": {
              "runAfter": {
                "ParseSensorJobsRefData": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": "@body('ParseSensorJobsRefData')?['value']",
                "headers": {
                  "ReadFileMetadataFromServer": true
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "post",
                "path": "[format('/v2/datasets/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/files', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
                "queries": {
                  "folderPath": "[format('{0}/sensorjobs', 'sensorintelligencereferencedata')]",
                  "name": "@{concat('sensorjobs', utcNow('yyyy-MM-ddTHH-mm'), '.json')}",
                  "queryParametersSingleEncoded": true
                }
              },
              "runtimeConfiguration": {
                "contentTransfer": {
                  "transferMode": "Chunked"
                }
              }
            },
            "GetAssetMaintenanceMappings": {
              "runAfter": {
                "AssetMaintenanceMappingsRefDataQuery": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "authentication": {
                  "audience": "00000015-0000-0000-c000-000000000000",
                  "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
                  "type": "ManagedServiceIdentity"
                },
                "method": "GET",
                "uri": "[format('{0}/data/SensorScenarioMapings?@{{variables(''AssetMaintenanceMappingsRefDataQuery'')}}', variables('trimmedEnvironmentUrl'))]"
              }
            },
            "GetSensorItemBatchAttributeMappings": {
              "runAfter": {},
              "type": "Http",
              "inputs": {
                "authentication": {
                  "audience": "00000015-0000-0000-c000-000000000000",
                  "type": "ManagedServiceIdentity",
                  "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
                },
                "method": "GET",
                "uri": "[uri(variables('trimmedEnvironmentUrl'), '/data/SensorJobItemBatchAttributes')]"
              }
            },
            "GetSensorJobs": {
              "runAfter": {},
              "type": "Http",
              "inputs": {
                "authentication": {
                  "audience": "00000015-0000-0000-c000-000000000000",
                  "type": "ManagedServiceIdentity",
                  "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
                },
                "method": "GET",
                "uri": "[uri(variables('trimmedEnvironmentUrl'), '/data/SensorJobs')]"
              }
            },
            "ListAllAssetMaintenanceBlobs": {
              "runAfter": {},
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "[format('/v2/datasets/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/foldersV2/@{{encodeURIComponent(encodeURIComponent(''/{1}/assetmaintenancedata''))}}', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'sensorintelligencereferencedata')]",
                "queries": {
                  "nextPageMarker": "",
                  "useFlatListing": false
                }
              }
            },
            "ListAllSensorJobItembatchAttributeMappings": {
              "runAfter": {},
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "[format('/v2/datasets/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/foldersV2/@{{encodeURIComponent(encodeURIComponent(''/{1}/sensorjobbatchattributes''))}}', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'sensorintelligencereferencedata')]",
                "queries": {
                  "nextPageMarker": "",
                  "useFlatListing": false
                }
              }
            },
            "ListAllSensorJobsBlobs": {
              "runAfter": {},
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "[format('/v2/datasets/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/foldersV2/@{{encodeURIComponent(encodeURIComponent(''JTJmc2Vuc29yaW50ZWxsaWdlbmNlcmVmZXJlbmNlZGF0YSUyZnNlbnNvcmpvYnMlMmY=''))}}', format('msdyniiotst{0}', variables('uniqueIdentifier')))]",
                "queries": {
                  "nextPageMarker": "",
                  "useFlatListing": false
                }
              }
            },
            "ParseSensorItemBatchAttributeMappingsRefData": {
              "runAfter": {
                "GetSensorItemBatchAttributeMappings": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('GetSensorItemBatchAttributeMappings')",
                "schema": {
                  "properties": {
                    "value": {
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "ParseSensorJobsRefData": {
              "runAfter": {
                "GetSensorJobs": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('GetSensorJobs')",
                "schema": {
                  "properties": {
                    "value": {
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "ParseAssetMaintenanceRefData": {
              "runAfter": {
                "GetAssetMaintenanceMappings": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('GetAssetMaintenanceMappings')",
                "schema": {
                  "properties": {
                    "value": {
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'azureblob')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier')))]",
                "connectionName": "azureblob",
                "connectionProperties": {
                  "authentication": {
                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          }
        },
        "accessControl": {
          "contents": {
            "allowedCallerIpAddresses": [
              {
                "addressRange": "0.0.0.0-0.0.0.0"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-storageaccountconnection-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', format('msdyniiotst{0}', variables('uniqueIdentifier')), 'default', 'sensorintelligencereferencedata')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('msdyniiotst{0}', variables('uniqueIdentifier')))]"
      ]
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2019-05-01",
      "name": "[format('msdyn-iiot-sdi-logicapp-notification-{0}', variables('uniqueIdentifier'))]",
      "location": "[variables('resourcesLocation')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier'))))]": {}
        }
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "When_Insight_is_added_to_outbound_queue_(peek-lock)": {
              "type": "ApiConnection",
              "recurrence": {
                "frequency": "Second",
                "interval": 30
              },
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                  }
                },
                "method": "get",
                "path": "[format('/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/messages/head/peek', 'outbound-insights')]",
                "queries": {
                  "queryType": "Main"
                }
              }
            }
          },
          "actions": {
            "Parse_Insight": {
              "inputs": {
                "content": "@decodeBase64(triggerBody()?['ContentData'])",
                "schema": {
                  "properties": {
                    "NotificationRaisedDateTime": {
                      "type": "string"
                    },
                    "Type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "runAfter": {},
              "type": "ParseJson"
            },
            "Notification_GUID": {
              "inputs": {
                "variables": [
                  {
                    "name": "NotificationGUID",
                    "type": "string",
                    "value": "@triggerBody()?['LockToken']"
                  }
                ]
              },
              "runAfter": {
                "Parse_Insight": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Compose_Notification_object": {
              "inputs": {
                "Id": "@{variables('NotificationGUID')}",
                "NotificationRaisedDateTime": "@{body('Parse_Insight')?['NotificationRaisedDateTime']}",
                "Payload": "@decodeBase64(triggerBody()?['ContentData'])",
                "Type": "@{body('Parse_Insight')?['Type']}"
              },
              "runAfter": {
                "Notification_GUID": [
                  "Succeeded"
                ]
              },
              "type": "Compose"
            },
            "Post_Notification": {
              "inputs": {
                "authentication": {
                  "audience": "00000015-0000-0000-c000-000000000000",
                  "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]",
                  "type": "ManagedServiceIdentity"
                },
                "body": "@outputs('Compose_Notification_object')",
                "headers": {
                  "Content-Type": "application/json"
                },
                "method": "POST",
                "uri": "[uri(variables('trimmedEnvironmentUrl'), '/data/OperationsNotifications')]"
              },
              "runAfter": {
                "Compose_Notification_object": [
                  "Succeeded"
                ]
              },
              "type": "Http"
            },
            "Complete_Insight_message_in_queue": {
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                  }
                },
                "method": "delete",
                "path": "[format('/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/messages/complete', 'outbound-insights')]",
                "queries": {
                  "lockToken": "@triggerBody()?['LockToken']",
                  "queueType": "Main",
                  "sessionId": ""
                }
              },
              "runAfter": {
                "Post_Notification": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('resourcesLocation'), 'servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier')))]",
                "connectionName": "servicebus",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity",
                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
                  }
                }
              }
            }
          }
        },
        "accessControl": {
          "contents": {
            "allowedCallerIpAddresses": [
              {
                "addressRange": "0.0.0.0-0.0.0.0"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', format('msdyn-iiot-sdi-servicebusconnection-{0}', variables('uniqueIdentifier')))]",
        "[resourceId('Microsoft.ServiceBus/namespaces/queues', format('msdyn-iiot-sdi-servicebus-{0}', variables('uniqueIdentifier')), 'outbound-insights')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))]"
      ]
    }
  ],
  "outputs": {
    "applicationId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('msdyn-iiot-sdi-identity-{0}', variables('uniqueIdentifier')))).clientId]",
      "metadata": {
        "description": "AAD Application ID to allowlist in Dynamics"
      }
    }
  }
}