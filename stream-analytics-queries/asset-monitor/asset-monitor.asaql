CREATE TABLE IotInput(
  eventEnqueuedUtcTime datetime,
  sensorId nvarchar(max),
  value float
);

CREATE TABLE AssetSensorMonitorThresholdsReferenceInput(
  sensorId nvarchar(max),
  CounterName nvarchar(max),
  CounterLowerThresholdValue float,
  CounterUpperThresholdValue float
);

WITH AssetSensorMonitorCounterValues AS
(
  SELECT
    I.sensorId,
    I.eventEnqueuedUtcTime,
    I.value,
    R.CounterName,
    R.CounterLowerThresholdValue,
    R.CounterUpperThresholdValue,
    CASE
      WHEN I.value >= R.CounterLowerThresholdValue AND I.value <= R.CounterUpperThresholdValue THEN 1
      ELSE 0
    END AS counterValueInRange
  FROM IotInput I
  TIMESTAMP BY I.eventEnqueuedUtcTime
  JOIN AssetSensorMonitorThresholdsReferenceInput R
  ON I.sensorId = R.sensorId
),
AssetSensorMonitorCounterValuesState AS
(
  SELECT
  *,
   /** Determine value for last signal was in range or not having same partition values as current signal.
       previousSignalValueInRange will be null if there was no previous signal */
  LAG(counterValueInRange) OVER
    (PARTITION BY
      sensorId,
      CounterName
      /** We keep the state for 1 hour and send even if machine has not change status.
          Customers should configure the below according to their preference.*/
      LIMIT DURATION(hour, 1)
    ) AS previousSignalValueInRange
    FROM AssetSensorMonitorCounterValues
)

SELECT
  CONCAT('AssetMonitor:', sensorId, ':', CounterName) AS metricKey,
  DATEDIFF(millisecond, CAST('1970-01-01' as datetime), eventEnqueuedUtcTime) AS uts,
  value AS val
INTO MetricOutput
from AssetSensorMonitorCounterValues

SELECT
  sensorId AS sensorId,
  CounterLowerThresholdValue AS minValue,
  CounterUpperThresholdValue AS maxValue,
  CounterName AS counterName,
  value AS sensorReading,
  eventEnqueuedUtcTime AS timestamp,
  eventEnqueuedUtcTime AS sensorTimestamp,
  System.Timestamp AS processingTimestamp,
  CASE
    WHEN counterValueInRange = 1 THEN 'TRUE'
    ELSE 'FALSE'
  END AS validCounterSignal,
  'AssetMonitor' AS notificationType,
  CONCAT('AssetMonitor:', sensorId, ':', CounterName) AS publishedMetric,
  'Asset Monitor' AS publishedMetricDisplayName
INTO NotificationOutput
FROM AssetSensorMonitorCounterValuesState
-- This ensures that we are not sending the notification twice.
WHERE
(
  (
    counterValueInRange = 0 AND
    (previousSignalValueInRange IS NULL OR previousSignalValueInRange = 1)
  )
  OR
  (
    counterValueInRange = 1 AND
    (previousSignalValueInRange IS NULL OR previousSignalValueInRange = 0)
  )
)


