/* Query for resource downtime scenario */
WITH FakeHeartBeat AS /* Generate an event for every time window  */
(
  SELECT COUNT(*)
  FROM IotInput
  TIMESTAMP BY EventEnqueuedUtcTime
  GROUP BY TumblingWindow(minute, 1)
),
AllSensors AS /* generate one event per sensor per period */
(
  SELECT
    SensorJobsReferenceInput.SensorId AS machineId,
    SensorJobsReferenceInput.IsJobInProgress AS isJobInProgress,
    SensorJobsReferenceInput.JobId AS jobId,
    SensorJobsReferenceInput.DataAreaId AS dataAreaId,
    cast(SensorJobsReferenceInput.MachineNotReportingThreshold as BIGINT) AS thresholdMins,
    System.Timestamp AS timestamp
  FROM FakeHeartBeat JOIN SensorJobsReferenceInput
  ON  1 = 1 /* Cross Join */
),
ActiveSensors AS /* compute how many events have been received in the time window from each device */
(
  SELECT
    deviceId as machineId,
    COUNT(*) AS eventCount,
    System.Timestamp AS timestamp
  FROM IotInput
  TIMESTAMP BY EventEnqueuedUtcTime
  GROUP BY deviceId, TumblingWindow(minute, 1)
),
AllSensorEventCounts AS /* Find event count for every device, also those with zero events if they should be in progress */
(
  SELECT
    AllSensors.*,
    CASE WHEN ActiveSensors.eventCount IS NULL THEN 0
      ELSE ActiveSensors.eventCount
    END AS eventCount
  FROM AllSensors LEFT JOIN ActiveSensors
  ON
    ActiveSensors.machineId = AllSensors.machineId
    AND DATEDIFF(ms, ActiveSensors, AllSensors) = 0
  WHERE
    ActiveSensors.eventCount IS NOT NULL   
    OR AllSensors.isJobInProgress = 'Yes'
),
SensorEventCountsWithinTwoThresholds AS /* Filter out all events earlier than two thresholds ago */
(
  SELECT *
  FROM AllSensorEventCounts
  WHERE DATEDIFF(minute, timestamp, System.Timestamp) < 2*thresholdMins
),
LastSensorEvents AS /* Find the number of minutes since each device last recieved events */
(
  SELECT
    *,
    COALESCE(
      DATEDIFF(
        minute,
        LAG(Timestamp) OVER (PARTITION BY machineId LIMIT DURATION(hour, 12) WHEN eventCount > 0), /* Maximum lookback is 12 hours, data only goes two thresholds back */
        Timestamp
      ),
      2*thresholdmins
    ) AS minutesSinceLastEvent
  FROM SensorEventCountsWithinTwoThresholds
),
StartedAndStoppedSensors AS /* Find devices that stopped sending or started sending */
(
  (SELECT
    *,
    'TRUE' as isMachineRunning
  FROM LastSensorEvents
  WHERE
  (minutesSinceLastEvent >= thresholdMins AND eventCount > 0)
  )
  UNION
  (SELECT
    *,
    'FALSE' as isMachineRunning
  FROM LastSensorEvents
  WHERE
    (minutesSinceLastEvent = thresholdMins AND eventCount = 0)
  )
)

/* Output metrics to metric output */
SELECT
CONCAT('MachineReportingStatus:', machineId) AS metricKey,
timestamp,
eventCount as value
INTO MetricOutput
FROM AllSensorEventCounts

/* Output notifications to service bus */
SELECT
machineId,
jobId,
dataAreaId,
isMachineRunning,
timestamp AS NotificationRaisedDateTime,
'MachineReportingStatus' AS Type
into ServiceBusOutput
From StartedAndStoppedSensors