CREATE TABLE IotInput(
  eventEnqueuedUtcTime datetime,
  sensorId nvarchar(max)
);

CREATE TABLE SensorJobsReferenceInput(
  sensorId nvarchar(max),
  jobId nvarchar(max),
  isJobInProgress nvarchar(max),
  jobDataAreaId nvarchar(max),
  machineNotReportingThreshold bigint
);

/* Query for machine reporting status scenario (equipment downtime) */
WITH FakeHeartBeat AS /* Generate an event for every time window  */
(
  SELECT COUNT(*)
  FROM IotInput
  TIMESTAMP BY eventEnqueuedUtcTime
  GROUP BY HoppingWindow(Duration(hour, 12), Hop(minute, 1))
),
AllSensors AS /* generate one event per sensor per period */
(
  SELECT
    SensorJobsReferenceInput.SensorId AS machineId,
    SensorJobsReferenceInput.IsJobInProgress AS isJobInProgress,
    SensorJobsReferenceInput.JobId AS jobId,
    SensorJobsReferenceInput.JobDataAreaId AS dataAreaId,
    SensorJobsReferenceInput.MachineNotReportingThreshold AS thresholdMins,
    System.Timestamp() AS timestamp
  FROM FakeHeartBeat
  JOIN SensorJobsReferenceInput
  ON 1 = 1 /* Cross Join */
),
ActiveSensors AS /* compute how many events have been received in the time window from each device */
(
  SELECT
    sensorId AS machineId,
    COUNT(*) AS eventCount,
    System.Timestamp() AS timestamp
  FROM IotInput
  TIMESTAMP BY eventEnqueuedUtcTime
  GROUP BY sensorId, TumblingWindow(minute, 1)
),
AllSensorEventCounts AS /* Find event count for every device, also those with zero events if they should be in progress */
(
  SELECT
    AllSensors.*,
    CASE WHEN ActiveSensors.eventCount IS NULL THEN 0
      ELSE ActiveSensors.eventCount
    END AS eventCount
  FROM AllSensors LEFT JOIN ActiveSensors
  ON
    ActiveSensors.machineId = AllSensors.machineId
    AND DATEDIFF(ms, ActiveSensors, AllSensors) = 0
),
SensorEventCountsWithinTwoThresholds AS /* Filter out all events earlier than two thresholds ago */
(
  SELECT *
  FROM AllSensorEventCounts
  WHERE DATEDIFF(minute, timestamp, System.Timestamp) < 2*thresholdMins
  AND AllSensorEventCounts.jobId IS NOT NULL
  AND AllSensorEventCounts.isJobInProgress = 'Yes'
),
LastSensorEvents AS /* Find the number of minutes since each device last recieved events */
(
  SELECT
    *,
    COALESCE(
      DATEDIFF(
        minute,
        LAG(timestamp) OVER (PARTITION BY machineId LIMIT DURATION(hour, 12) WHEN eventCount > 0), /* Maximum lookback is 12 hours, data only goes two thresholds back */
        timestamp
      ),
      2*thresholdmins
    ) AS minutesSinceLastEvent
  FROM SensorEventCountsWithinTwoThresholds
),
StartedAndStoppedSensors AS /* Find devices that stopped sending or started sending */
(
  (SELECT
    *,
    'TRUE' AS isMachineRunning
  FROM LastSensorEvents
  WHERE
  (minutesSinceLastEvent >= thresholdMins AND eventCount > 0))
  UNION
  (SELECT
    *,
    'FALSE' AS isMachineRunning
  FROM LastSensorEvents
  WHERE
    (minutesSinceLastEvent = thresholdMins AND eventCount = 0)
  )
)

SELECT
  machineId,
  jobId,
  dataAreaId,
  isMachineRunning,
  timestamp,
  'MachineReportingStatus' AS notificationType,
  CONCAT('MachineReportingStatus:', machineId) AS publishedMetric,
  'Part Out' AS publishedMetricDisplayName
INTO NotificationOutput
FROM StartedAndStoppedSensors

SELECT
  CONCAT('MachineReportingStatus:', machineId) AS metricKey,
  DATEDIFF(millisecond, CAST('1970-01-01' as datetime), timestamp) AS uts,
  CAST(EventCount AS FLOAT) AS val
INTO MetricOutput
FROM AllSensorEventCounts
